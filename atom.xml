<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://unknowncabbage.github.io/atom.xml" rel="self"/>
  
  <link href="http://unknowncabbage.github.io/"/>
  <updated>2022-05-14T07:46:18.604Z</updated>
  <id>http://unknowncabbage.github.io/</id>
  
  <author>
    <name>不知名小白菜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构</title>
    <link href="http://unknowncabbage.github.io/2022/05/14/algorithm1/"/>
    <id>http://unknowncabbage.github.io/2022/05/14/algorithm1/</id>
    <published>2022-05-14T07:04:01.000Z</published>
    <updated>2022-05-14T07:46:18.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构走起！"><a href="#数据结构走起！" class="headerlink" title="数据结构走起！"></a><strong>数据结构走起！</strong></h2><p>Loading……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据结构走起！&quot;&gt;&lt;a href=&quot;#数据结构走起！&quot; class=&quot;headerlink&quot; title=&quot;数据结构走起！&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据结构走起！&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Loading……&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://unknowncabbage.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="http://unknowncabbage.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS面试题集合</title>
    <link href="http://unknowncabbage.github.io/2022/05/14/Face/"/>
    <id>http://unknowncabbage.github.io/2022/05/14/Face/</id>
    <published>2022-05-13T17:40:15.000Z</published>
    <updated>2022-05-14T07:09:37.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲了很久，来看看JS面试题"><a href="#闲了很久，来看看JS面试题" class="headerlink" title="闲了很久，来看看JS面试题"></a><strong>闲了很久，来看看JS面试题</strong></h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimgo.liulanqi.net%2Fimg2021%2F8%2F3%2F16%2F2021080306162527.jpg&refer=http%3A%2F%2Fimgo.liulanqi.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655055719&t=b021a867f2d422ae5975c3348e8b8aae" alt="img"></p><h4 id="涩涩狗子镇楼！"><a href="#涩涩狗子镇楼！" class="headerlink" title="涩涩狗子镇楼！"></a>涩涩狗子镇楼！</h4><h3 id="1：延迟加载JS的方式？"><a href="#1：延迟加载JS的方式？" class="headerlink" title="1：延迟加载JS的方式？"></a>1：延迟加载JS的方式？</h3><p>async 与 defer</p><p>async 是解析与渲染DOM结构同时进行</p><p>defer虽然也是解析script脚本与渲染DOM同时进行，但是会等待DOM结构渲染完成以后再去加载script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=&quot;../&quot;&gt;&lt;script&gt;</span><br><span class="line">&lt;script async src=&quot;../&quot;&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2：数据类型"><a href="#2：数据类型" class="headerlink" title="2：数据类型"></a><strong>2：数据类型</strong></h3><p>javascript数据类型分为基本类型与引用类型两大类</p><p>基本类型：string，number，boolean，null，undefined，symbol，bigInt(存在争论，有些人认为不应该)</p><p>引用类型：object（object是一个大类，包含对象，数组，函数等引用类型）</p><h3 id="3：null和undefined的区别"><a href="#3：null和undefined的区别" class="headerlink" title="3：null和undefined的区别"></a><strong>3：null和undefined的区别</strong></h3><p>最初javascript木有undefined类型，是作者后续添加的，他本人认为不能将一切表示为无的值都设置为null，可以将无的基本类型设置为undefined</p><h3 id="4：-x3D-x3D-与-x3D-x3D-x3D-的区别"><a href="#4：-x3D-x3D-与-x3D-x3D-x3D-的区别" class="headerlink" title="4：&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别"></a><strong>4：&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别</strong></h3><p>&#x3D;&#x3D; 在数据比较时，会隐式转换（调用valueof进行转换对比）,只比较值不比较类型</p><p>而&#x3D;&#x3D;&#x3D;比较类型也比较值 必须到完全的相同，因此在项目中比较两个值应该采用&#x3D;&#x3D;&#x3D;的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = 2</span><br><span class="line">if（a == &#x27;2&#x27;）&#123;</span><br><span class="line">    console.log(&#x27; a = &#x27;2&#x27; &#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5：微任务和宏任务"><a href="#5：微任务和宏任务" class="headerlink" title="5：微任务和宏任务"></a>5：微任务和宏任务</h3><p>script脚本中包含同步与异步逻辑，页面会首先执行同步代码，再执行异步代码</p><p>而异步代码又区分为微任务和宏任务，与事件循环机制相关</p><p>在执行宏任务之前，会查看页面有没有未执行的微任务，先清空页面微任务再执行宏任务</p><p>微任务：Promise.then</p><p>宏任务：定时器，事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;123&#x27;)</span><br><span class="line">&#125;,2000)</span><br><span class="line"></span><br><span class="line">new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">console.log(&#x27;promise&#x27;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;then1&#x27;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;then2&#x27;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;同步&#x27;)</span><br><span class="line"></span><br><span class="line">result: &#x27;promise&#x27; &#x27;同步&#x27; &#x27;then1&#x27; &#x27;then2&#x27; &#x27;123&#x27;</span><br></pre></td></tr></table></figure><h3 id="6：作用域-smile-cat"><a href="#6：作用域-smile-cat" class="headerlink" title="6：作用域:smile_cat:"></a>6<strong>：作用域</strong>:smile_cat:</h3><p>1：除了函数外 js是没有块级作用域的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function aa()&#123;</span><br><span class="line">let a = 10</span><br><span class="line">&#125;</span><br><span class="line">aa()</span><br><span class="line">console.log(a) ::a is not defined</span><br><span class="line"></span><br><span class="line">for(var i = 1; i &lt; 10 : i++)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">console.log(i) : i = 10</span><br></pre></td></tr></table></figure><p>2：作用域链 内部可以访问外部变量 外部无法访问内部变量 从内到外依次查找 遵循内部优先</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let a = 10</span><br><span class="line">function fn（）&#123;</span><br><span class="line">    function fnn（）&#123;</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fnn()</span><br><span class="line">&#125;</span><br><span class="line">fn() : 10</span><br></pre></td></tr></table></figure><p>3；声明变量不带var 那么就是挂载window上 任意位置都能访问</p><p>var  a &#x3D; b &#x3D; 10   &#x3D;&#x3D;&#x3D;   var a &#x3D; 10    window.b &#x3D; 10</p><p>var a,b &#x3D; 10 &#x3D;&#x3D;&#x3D; var a &#x3D; 10   var b &#x3D; 10</p><p>4：js有变量提升  国外称为变量悬挂声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">//var str</span><br><span class="line">console.log(str) // undefined</span><br><span class="line">var str = 20</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><p>5：优先级</p><p>声明变量 &gt; 声明普通函数 &gt; 参数 &gt;  变量提升</p><h3 id="7：对象"><a href="#7：对象" class="headerlink" title="7：对象"></a><strong>7：对象</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log([1,2,3] === [1,2,3]) //false 因为两个对象都是new出来的并不相同</span><br><span class="line"></span><br><span class="line">var a = &#123;</span><br><span class="line">    a：1</span><br><span class="line">&#125;</span><br><span class="line">var b = a</span><br><span class="line">console.log(a === b) //true 因为史诗同一个引用对象 因此相同</span><br></pre></td></tr></table></figure><p>对象的key都是字符串类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">有趣的面试题</span><br><span class="line">var a = &#123;&#125;</span><br><span class="line">var b = &#123;</span><br><span class="line">    key：&#x27;a&#x27;</span><br><span class="line">&#125;</span><br><span class="line">var c = &#123;</span><br><span class="line">    key:&#x27;c&#x27;</span><br><span class="line">&#125;</span><br><span class="line">a[b] = &#x27;123&#x27; // a[obj obj] = &#x27;123&#x27;</span><br><span class="line">a[c] = &#x27;456&#x27; // a[obj obj] = &#x27;456&#x27;</span><br><span class="line">console.log(a[b]) //console.log(a[obj obj])</span><br></pre></td></tr></table></figure><p>对象是如何查找某个属性？ 对象是通过构造函数生成的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Fun（）&#123;</span><br><span class="line">    this.a = &#x27;fun&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.a = &#x27;fun原型&#x27;</span><br><span class="line">let obj = new Fun()</span><br><span class="line">obj.a = &#x27;对象本身&#x27;</span><br><span class="line">obj.__proto__.a = &#x27;对象原型&#x27;</span><br><span class="line">console.log(obj.a) // &#x27;对象本身&#x27;</span><br><span class="line">先查找对象本身 =&gt; 构造函数的内部 =&gt; 对象的原型 =&gt; 构造函数的原型 =&gt; 对象上一层原型</span><br></pre></td></tr></table></figure><h3 id="8：作用域-this指向-原型"><a href="#8：作用域-this指向-原型" class="headerlink" title="8：作用域  + this指向 + 原型"></a>8：作用域  + this指向 + 原型</h3><p>Loading——</p><h3 id="9：判断数组方法"><a href="#9：判断数组方法" class="headerlink" title="9：判断数组方法"></a>9：判断数组方法</h3><p>使用场景：虚拟dom判断子节点是不是数组</p><p>1：isArray</p><p>2：instanceof [坑多，typeof更多 不建议用]</p><p>3：原型判断</p><p>4:：isPrototypeOf()</p><p>5：constructor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3]</span><br><span class="line">console.log(Array.isArray(arr)) //true</span><br><span class="line">console.log(arr instanceof Array) //true</span><br><span class="line">console.log(Object.prototype.toString.call(arr).indexOf(&#x27;Array&#x27;) != -1) //8 [Object Array]</span><br><span class="line">console.log(Array.prototypee.isPrototypeOf(arr)) </span><br><span class="line">console.log(arr.constructor.toString().indexOf(&#x27;Array&#x27;) &gt; -1)</span><br></pre></td></tr></table></figure><h3 id="10：slice与splice"><a href="#10：slice与splice" class="headerlink" title="10：slice与splice"></a>10：slice与splice</h3><p>slice的作用，splice是否会改变原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//slice截取作用 参数可以写一个 代表从该参数位置开始截取到最后</span><br><span class="line">let arr = [a,b,c,d]</span><br><span class="line">let arr2 = arr.slice(1,3) //从索引1开始 截取到3之前一位 [b,c] 返回新数组</span><br><span class="line"></span><br><span class="line">//splice 删除 ，插入，替换 会改变原数组</span><br><span class="line">let arr2 = [a,b,c,d]</span><br><span class="line">let arr3 = arr2.splice(1,1) // b 返回删除的元素数组 原本的arr2 [a,c,d]</span><br><span class="line">let arr4 = arr2.splice(1,1,&#x27;你好&#x27;) // 从1开始 删除一个元素 在原本位置插入你好</span><br></pre></td></tr></table></figure><h3 id="11：多维数组最大值"><a href="#11：多维数组最大值" class="headerlink" title="11：多维数组最大值"></a>11：多维数组最大值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let arr  = [</span><br><span class="line">    [4,4,5],</span><br><span class="line">    [10,123,123],</span><br><span class="line">    [123123,12,323,123]</span><br><span class="line">]</span><br><span class="line">分别找到每个数组最大的值</span><br><span class="line">输出[5,123,123123]</span><br><span class="line"></span><br><span class="line">code：</span><br><span class="line">function(arr)&#123;</span><br><span class="line">    let newArr = []</span><br><span class="line">    arr.forEach((iitem,index)=&gt;&#123;</span><br><span class="line">        newArr.push(Math.max(...item))</span><br><span class="line">    &#125;)</span><br><span class="line">    reurn newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12：字符串新增方法实现某些功能"><a href="#12：字符串新增方法实现某些功能" class="headerlink" title="12：字符串新增方法实现某些功能"></a>12：字符串新增方法实现某些功能</h3><p>给字符串定义一个方法addStart，当传入该方法一个字符串时，返回当前字符串+参数前缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.addStr = function(str)&#123;</span><br><span class="line">    return str + this</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13：找出字符串出现最多次数字符和次数"><a href="#13：找出字符串出现最多次数字符和次数" class="headerlink" title="13：找出字符串出现最多次数字符和次数"></a>13：找出字符串出现最多次数字符和次数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1:</span><br><span class="line">var str = &#x27;111222333333444444444444&#x27;</span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">for(var i = 0; i &lt; str.length; i++)&#123;</span><br><span class="line">    if(obj[str[i]])&#123;</span><br><span class="line">        obj[str[i]]++</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        obj[str[i]] = 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj) // &#123;a:b:c:d:&#125;</span><br><span class="line">///统计最大值</span><br><span class="line">var max = 0</span><br><span class="line">for(var k in obj)&#123;</span><br><span class="line">    if(max &lt; obj.key)&#123;</span><br><span class="line">        max = obj.key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">    if(mx == obj[key])&#123;</span><br><span class="line">console.log(obj[key]) // 最多次数的字符</span><br><span class="line">console.log(max) //最次数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14：new操作符"><a href="#14：new操作符" class="headerlink" title="14：new操作符"></a>14：new操作符</h3><p>1：创建一个空的对象</p><p>2：将空对象的原型指向构造函数原型</p><p>3：将空对作为构造函数上下文（改变this指向）</p><p>4：对构造函数有返回值的处理判断 如果这个构造函数返回基本类型 那么会忽略 如果是引用类型则会返回这个引用类型 new失效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function Fo（）&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.log(new Fo()) //obj 创建一个空的对象</span><br><span class="line">console.log(new Fo.__proto__ === Fo.prototype)</span><br><span class="line">console.log()</span><br><span class="line"></span><br><span class="line">实现一个相同的函数</span><br><span class="line">function Fun(age,name)&#123;</span><br><span class="line">this.age = age</span><br><span class="line">this.name = name</span><br><span class="line">&#125;</span><br><span class="line">function create(fn,..args)&#123;</span><br><span class="line">//创建空对象</span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">//将空对象原型指向构造函数原型</span><br><span class="line">Object.setPrototypeOf(obj,fn.prototype)</span><br><span class="line">//改变this指向</span><br><span class="line">var result = fn.apply(obj.args)</span><br><span class="line">//最后处理</span><br><span class="line">return result instanceof Object ? result : obj</span><br><span class="line">&#125;</span><br><span class="line">function(create(Fun,18,&#x27;lisi&#x27;))</span><br></pre></td></tr></table></figure><h3 id="15：闭包"><a href="#15：闭包" class="headerlink" title="15：闭包"></a>15：闭包</h3><p>1：闭包是什么</p><p>一个函数加上到创建函数作用域的连接 闭包关闭了函数在自由变量</p><p>js中尽量不要写全局变量 因为系统并不知道什么时候会垃圾回收</p><p>2：闭包可以解决什么问题【优点】</p><p>内部函数可以访问到外部函数局部变量</p><p>3：闭包的缺点</p><p>变量会驻留在内存中 造成内存损耗问题</p><p>内存泄露是在ie的情况</p><p>解决方式手动清空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function a ()&#123;</span><br><span class="line">var b = 10</span><br><span class="line">return function()&#123;</span><br><span class="line">     console.log(b)   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a()() // a()执行完以后没有销毁 因此a()()能够打印出b</span><br><span class="line"></span><br><span class="line">//优点</span><br><span class="line">let lis = document.getElementsByTagName(&#x27;li&#x27;)</span><br><span class="line">for(var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    lis[i].onclick = function()&#123;</span><br><span class="line">        console.log(i) // 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">改造成闭包的形式</span><br><span class="line">for(var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">function((i)&#123;</span><br><span class="line">            lis[i].onclick = function()&#123;</span><br><span class="line">                console.log(i) // 3</span><br><span class="line">            &#125;</span><br><span class="line">            lis[i] = null //手动清空</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16：原型链"><a href="#16：原型链" class="headerlink" title="16：原型链"></a>16：原型链</h3><h3 id="17：js继承方式"><a href="#17：js继承方式" class="headerlink" title="17：js继承方式"></a>17：js继承方式</h3><h3 id="18：call，apply，bind区别"><a href="#18：call，apply，bind区别" class="headerlink" title="18：call，apply，bind区别"></a><strong>18：call，apply，bind区别</strong></h3><h3 id="19：sort背后原理"><a href="#19：sort背后原理" class="headerlink" title="19：sort背后原理"></a>19：sort背后原理</h3><h3 id="20：深拷贝与浅拷贝"><a href="#20：深拷贝与浅拷贝" class="headerlink" title="20：深拷贝与浅拷贝"></a>20：深拷贝与浅拷贝</h3><h3 id="21：本次存储localStorage-x2F-sessionStorage与cookie区别"><a href="#21：本次存储localStorage-x2F-sessionStorage与cookie区别" class="headerlink" title="21：本次存储localStorage&#x2F;sessionStorage与cookie区别"></a>21：本次存储localStorage&#x2F;sessionStorage与cookie区别</h3><p>未完待续……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;闲了很久，来看看JS面试题&quot;&gt;&lt;a href=&quot;#闲了很久，来看看JS面试题&quot; class=&quot;headerlink&quot; title=&quot;闲了很久，来看看JS面试题&quot;&gt;&lt;/a&gt;&lt;strong&gt;闲了很久，来看看JS面试题&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    <category term="面试" scheme="http://unknowncabbage.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试题" scheme="http://unknowncabbage.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HaoUI第二次尝试</title>
    <link href="http://unknowncabbage.github.io/2022/05/13/HaoUI2/"/>
    <id>http://unknowncabbage.github.io/2022/05/13/HaoUI2/</id>
    <published>2022-05-13T04:08:17.000Z</published>
    <updated>2022-05-13T06:16:36.669Z</updated>
    
    <content type="html"><![CDATA[<p>之前完成了h-icon与h-button的封装，今天来尝试一下完成HaoUI其他组件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前完成了h-icon与h-button的封装，今天来尝试一下完成HaoUI其他组件&lt;/p&gt;
</summary>
      
    
    
    
    <category term="HaoUI" scheme="http://unknowncabbage.github.io/categories/HaoUI/"/>
    
    
    <category term="个人组件库" scheme="http://unknowncabbage.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HaoUI开始</title>
    <link href="http://unknowncabbage.github.io/2022/05/13/HaoUI1/"/>
    <id>http://unknowncabbage.github.io/2022/05/13/HaoUI1/</id>
    <published>2022-05-12T17:45:55.000Z</published>
    <updated>2022-05-13T04:13:48.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HaoUI-h-icon-与-h-button"><a href="#HaoUI-h-icon-与-h-button" class="headerlink" title="HaoUI  h-icon 与 h-button"></a><strong>HaoUI  h-icon 与 h-button</strong></h2><p>h-icon 图标组件</p><p>h-button按钮组件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HaoUI-h-icon-与-h-button&quot;&gt;&lt;a href=&quot;#HaoUI-h-icon-与-h-button&quot; class=&quot;headerlink&quot; title=&quot;HaoUI  h-icon 与 h-button&quot;&gt;&lt;/a&gt;&lt;strong&gt;HaoUI  h</summary>
      
    
    
    
    <category term="HaoUI" scheme="http://unknowncabbage.github.io/categories/HaoUI/"/>
    
    
    <category term="个人组件库" scheme="http://unknowncabbage.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>邂逅Node</title>
    <link href="http://unknowncabbage.github.io/2022/05/13/Node1/"/>
    <id>http://unknowncabbage.github.io/2022/05/13/Node1/</id>
    <published>2022-05-12T17:20:29.000Z</published>
    <updated>2022-05-14T11:14:01.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邂逅Node"><a href="#邂逅Node" class="headerlink" title="邂逅Node"></a><strong>邂逅Node</strong></h2><h3 id="1：浏览器内核"><a href="#1：浏览器内核" class="headerlink" title="1：浏览器内核"></a><strong>1：浏览器内核</strong></h3><p>Geoko，Trident，Webkit，Blink</p><p>但是前端经常提到的浏览器内核一般是浏览器的排版引擎</p><p>排版引擎 ，浏览器引擎，页面渲染引擎，样排引擎</p><h3 id="2：比较常见的javascript引擎"><a href="#2：比较常见的javascript引擎" class="headerlink" title="2：比较常见的javascript引擎"></a>2：比较常见的javascript引擎</h3><p>SpiderMonkey：js作者开发</p><p>Chakra：微软开发</p><p>JavascriptCore：Webkit中的js引擎 apple开发</p><p>V8：谷歌的，脱颖而出</p><p>V8执行js代码的原理</p><h3 id="3：Node"><a href="#3：Node" class="headerlink" title="3：Node"></a><strong>3：Node</strong></h3><p>node是基于v8引擎的js运行环境</p><p>如果想在一台电脑运行多个node版本 那么可以借助nvm与n工具</p><p>但是这两个工具不支持windows，不过有其他人开发出了支持windows的版本</p><h3 id="4：全局对象和模块化开发"><a href="#4：全局对象和模块化开发" class="headerlink" title="4：全局对象和模块化开发"></a><strong>4：全局对象和模块化开发</strong></h3><p>node index.js env&#x3D;development</p><p>可以在后面跟随传递参数 在index.js中根据console.log(process.argv)获取</p><p><img src="http://rbejlh1j3.hn-bkt.clouddn.com/node/Snipaste_2022-05-14_18-56-01.png"></p><p><img src="http://rbejlh1j3.hn-bkt.clouddn.com/node/Snipaste_2022-05-14_18-56-24.png"></p><p>console.clear() 清空</p><p>console.trace() 追踪 打印函数调用栈</p><h4 id="常见全局对象"><a href="#常见全局对象" class="headerlink" title="常见全局对象"></a>常见全局对象</h4><p>require，__dirname，module，URL，exports等，可以去官网查看更多全局对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;邂逅Node&quot;&gt;&lt;a href=&quot;#邂逅Node&quot; class=&quot;headerlink&quot; title=&quot;邂逅Node&quot;&gt;&lt;/a&gt;&lt;strong&gt;邂逅Node&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1：浏览器内核&quot;&gt;&lt;a href=&quot;#1：浏览器内核&quot; clas</summary>
      
    
    
    
    <category term="Node" scheme="http://unknowncabbage.github.io/categories/Node/"/>
    
    
    <category term="Node学习" scheme="http://unknowncabbage.github.io/tags/Node%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
