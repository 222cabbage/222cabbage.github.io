<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://222cabbage.github.io/atom.xml" rel="self"/>
  
  <link href="https://222cabbage.github.io/"/>
  <updated>2022-07-18T16:25:41.660Z</updated>
  <id>https://222cabbage.github.io/</id>
  
  <author>
    <name>不知名小白菜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习一下ts</title>
    <link href="https://222cabbage.github.io/2022/07/10/tsstudy1/"/>
    <id>https://222cabbage.github.io/2022/07/10/tsstudy1/</id>
    <published>2022-07-10T03:11:20.000Z</published>
    <updated>2022-07-18T16:25:41.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习一下TS吧"><a href="#学习一下TS吧" class="headerlink" title="学习一下TS吧"></a>学习一下TS吧</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">首先全或者在对应文件夹下npm install typeescript -g  / -D</span><br><span class="line">tsc init 生成ts配置文件</span><br><span class="line">outDir输出目录</span><br><span class="line">rootDir代码根目录</span><br><span class="line">tsc 打包</span><br><span class="line"></span><br><span class="line">安装ts-node可以直接运行ts代码，无序将ts编译成js、</span><br><span class="line">npm install ts-node -D</span><br><span class="line">安装nodemon可以自动检测目录中文件改动后自动重新启动</span><br><span class="line">npm install nodemon -D</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/07/10/js8xzV.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;nodemon --watch src/ -e ts --exec ts-node ./src/index.ts&quot;</span><br><span class="line">&#125;,</span><br><span class="line">监听src文件夹下后缀名为ts的文件变化，一有变化就重新执行index.ts文件</span><br><span class="line"></span><br><span class="line">parcle打包运行</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;nodemon --watch src/ -e ts --exec ts-node ./src/index.ts&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;parcel ./index.html&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类是拥有相同属性和方法的集合，有静态特征和动态特征</span><br><span class="line">静态特征：属性，姓名属性</span><br><span class="line">动态特征：方法，吃饭走路</span><br><span class="line"></span><br><span class="line">创建类的过程</span><br><span class="line">1：在堆中开辟一块空间</span><br><span class="line">2：调用对应构造函数 new XXX() 匹配构造器constructor</span><br><span class="line">3：把对象赋值给对象变量/吧实例赋值给实例对象/改变this指向</span><br></pre></td></tr></table></figure><p>类的源码，底层，原生es5</p><p>转换为es5函数</p><h5 id="引用属性"><a href="#引用属性" class="headerlink" title="引用属性"></a>引用属性</h5><p>数组，函数，类，对象，对象数组，集合类set，map，自定义，集合类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">constructor中的参数本身需要通过this.xx = xx为属性赋值，括号纵只是参数</span><br><span class="line">但是如果添加了public等修饰符，就不用再赋值，会隐式操作挂载为属性</span><br><span class="line">constructor(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line">&#125;</span><br><span class="line">添加public等修饰符后</span><br><span class="line">constructor(public name,public age)&#123;</span><br><span class="line">    不需要再赋值，隐式挂载</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">不使用重载</span><br><span class="line">function(value: number | Message):Message | Array&lt;Message&gt; | undefined &#123;</span><br><span class="line">    if(typeof value === &#x27;number&#x27;)&#123;</span><br><span class="line">        return messages.find(item =&gt; item.id === value)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return messages.filter(item =&gt; item.type === value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">缺点：</span><br><span class="line">联合类型中，方法属性会受到限制，会提取公用属性和方法，交集</span><br><span class="line">TS无法根据参数来推倒最终返回的类型中的数据类型</span><br><span class="line">只可以根据方法定义的类型来展现</span><br><span class="line"></span><br><span class="line">使用重载</span><br><span class="line">函数重载规则</span><br><span class="line">函数签名 = 函数名 + 函数参数 + 函数参数类型 + 返回值类型，不包括函数体</span><br><span class="line">函数重载定义</span><br><span class="line">由一个实现签名或者多个实现签名组成</span><br><span class="line">外部调用时，只能调用重载签名，不能调用实现签名</span><br><span class="line">调用重载函数时，会根据传递的参数来判断你调用的是哪一个函数</span><br><span class="line">只有一个函数体，只有实现签名配备了函数体</span><br><span class="line">function getMessage(id:number):number</span><br><span class="line">function getmessage(message:Message):Array&lt;Message&gt;</span><br><span class="line">function getMessage(value:any):number | Array&lt;Message&gt; | undefined &#123;</span><br><span class="line">    if(typeof value === &#x27;number&#x27;)&#123;</span><br><span class="line">        return messages.find(item =&gt; item.id === value)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return messages.filter(item =&gt; item.type === value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">有利于功能扩展</span><br><span class="line">任何类型都是unknown的子类型</span><br><span class="line">何时用any，何时用unknown</span><br><span class="line">unknown只能作为父类，不能作为子类</span><br><span class="line">let x:unknown = 3</span><br><span class="line">let z:number = x</span><br></pre></td></tr></table></figure><h5 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">规则与函数重载相同，有细小区别</span><br><span class="line">方法是特定情境下的函数，由对象变量/实例变量直接调用的函数都是方法</span><br><span class="line">let p = new P()</span><br><span class="line">p.sendMessage()//方法</span><br><span class="line">方法签名 = 方法名称 + 方法参数 + 方法参数类型 + 方法返回值类型</span><br></pre></td></tr></table></figure><p>在new时，会隐式的将this返回给左边的对象变量。this和等号左边变量都指向当前正创建的对象</p><h5 id="重载应用，求图形面积"><a href="#重载应用，求图形面积" class="headerlink" title="重载应用，求图形面积"></a>重载应用，求图形面积</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">type type_s = &#123;</span><br><span class="line">    width:number,</span><br><span class="line">    height:number,</span><br><span class="line">    radious?:number</span><br><span class="line">&#125;</span><br><span class="line"> class Square &#123;</span><br><span class="line">     public width:number</span><br><span class="line">     public height:number</span><br><span class="line">     constructor(width:number,height:number) // 重载签名</span><br><span class="line">     constructor(type:type_s) // 重载签名</span><br><span class="line">     constructor(value:any,height?:number)&#123;</span><br><span class="line">        this.width = value</span><br><span class="line">        this.height = height</span><br><span class="line">        if(typeof value === &#x27;object&#x27;)&#123;</span><br><span class="line">            let &#123; width,height &#125; = value</span><br><span class="line">            this.width = width</span><br><span class="line">            this.height = height</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            this.width = value</span><br><span class="line">            this.height = height</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     public getArea()&#123;</span><br><span class="line">         return this.width * this.height</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> let s = new Square(30,40)</span><br><span class="line"> let s2 = new Square(&#123;width:20,height:30&#125;)</span><br></pre></td></tr></table></figure><h5 id="单件设计模式"><a href="#单件设计模式" class="headerlink" title="单件设计模式"></a>单件设计模式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">单件设计模式概述</span><br><span class="line">一个类对外有且仅有一个实例</span><br><span class="line">如果一个类对外只提供一个对象类，并且在该类的内部提供了一个外部可以访问该对象的属性和方法</span><br><span class="line">通过静态方法访问</span><br><span class="line">public static getXXX()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">静态方法和对象无关，外部变量无法访问静态方法和属性，可以通过类名调用</span><br><span class="line">静态方法和原型方法/对象方法是不同的，互相都不能访问</span><br><span class="line">一个静态方法改变了某个静态属性，其他静态方法或者外部任何地方访问这个属性都会改变</span><br><span class="line">除了栈，堆之外，还有静态内存区</span><br><span class="line">静态成员保存在内存的静态区，静态成员的内存分配要早于对象空间的分配，也就是对象创建之前，Ts就已经为静态成员分配好了空间，一个静态方法分配一个空间，只要服务器电脑不重启，静态方法就一直保存在内存空间，无论调用多少次，访问的都是同一片空间</span><br><span class="line">export default class MyLocal&#123;</span><br><span class="line">// 饿汉式 直接先创建</span><br><span class="line">    static localStorage:MyLocal = new MyLocal（）</span><br><span class="line">    private constructor()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    // 给外部提供访问内部对象的方法</span><br><span class="line">    public static getConstructor()&#123;</span><br><span class="line">    // 懒汉式 调用方法才创建</span><br><span class="line">        if(!this.localStorage)&#123;</span><br><span class="line">            this.localStorage = new MyLocal()</span><br><span class="line">        &#125;</span><br><span class="line">        return this.localStorage</span><br><span class="line">    &#125;</span><br><span class="line">    public static setItem(key:string,value:any)&#123;</span><br><span class="line">        localStorage.setItem(key,JSON.stringify(value))</span><br><span class="line">    &#125;</span><br><span class="line">    public getItem(key:string)&#123;</span><br><span class="line">        let value = localStorage.getItem(key)</span><br><span class="line">        return value != null ? JSON.parse(value) : null</span><br><span class="line">    &#125;</span><br><span class="line">    public removeItem(key:string)&#123;</span><br><span class="line">        localStorage.removeItem(key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123; MyLocal &#125; from &#x27;./MyLoacl.js&#x27;</span><br><span class="line">MyLocal.getConstructor()</span><br><span class="line"></span><br><span class="line">什么情况适合采用单件模式。较多复用的内容，后续多使用，方法类，对象属性并不多，创建实例意义不大</span><br></pre></td></tr></table></figure><h5 id="继承Loading学习到5-5先跳过"><a href="#继承Loading学习到5-5先跳过" class="headerlink" title="继承Loading学习到5-5先跳过"></a>继承Loading学习到5-5先跳过</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">// 类型断言，类型转换</span><br><span class="line">// a数据类型 as b数据类型 </span><br><span class="line">// a和b必须要有交叠 </span><br><span class="line">// 判断交叠的条件</span><br><span class="line"></span><br><span class="line">// 场景1 a和b都是类并且是父子继承关系 通常是将父类类型转换为子类类型</span><br><span class="line">// class Father &#123;</span><br><span class="line">//     public name:string</span><br><span class="line">// &#125;</span><br><span class="line">// class Son extends Father&#123;</span><br><span class="line">//     study()&#123;</span><br><span class="line"></span><br><span class="line">//     &#125;</span><br><span class="line">// &#125;</span><br><span class="line">// let fat = new Father()</span><br><span class="line">// let res = fat as Son 将father类型转换为son类型</span><br><span class="line">// 什么是类型转换</span><br><span class="line">// let res = &lt;Son&gt;fat</span><br><span class="line">// res.</span><br><span class="line">// let son = new Son()</span><br><span class="line">// let res2 = son as Father</span><br><span class="line">// res2.</span><br><span class="line">// new 的底层发生了什么</span><br><span class="line"></span><br><span class="line">// 场景2 ab都是类 但是没有继承关系 转换后的类型必须包含转换前的类型的所有属性 转换之前的属性是转换之后的子集</span><br><span class="line">// class A &#123;</span><br><span class="line">//     public name:string</span><br><span class="line">// &#125;</span><br><span class="line">// class B &#123;</span><br><span class="line">//     public name:string</span><br><span class="line">//     public age:number</span><br><span class="line">// &#125;</span><br><span class="line">// let a = new A()</span><br><span class="line">// let res = a as B</span><br><span class="line">// let b = new B()</span><br><span class="line"></span><br><span class="line">// 场景3 A是类，b是接口，A类实现了B接口 implements</span><br><span class="line">// interface B &#123;</span><br><span class="line">//     username:string,</span><br><span class="line">//     age:number</span><br><span class="line">// &#125;</span><br><span class="line">// class A implements B &#123;</span><br><span class="line">//     public username: string</span><br><span class="line">//     public age: number</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 场景4 A是类 B是接口 A类没有实现B接口</span><br><span class="line"></span><br><span class="line">// 场景5 A是类 B是type定义的类型</span><br><span class="line">// type B  = &#123;</span><br><span class="line">//     username:string,</span><br><span class="line">//     age:number</span><br><span class="line">// &#125;</span><br><span class="line">// class A implements B &#123;</span><br><span class="line">//     public username: string</span><br><span class="line">//     public age: number</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 场景6 A是类 B是type定义的类型 A没有实现B定义的数据类型</span><br><span class="line">// type B  = &#123;</span><br><span class="line">//     username:string,</span><br><span class="line">//     age:number</span><br><span class="line">// &#125;</span><br><span class="line">// class A  &#123;</span><br><span class="line">//     public username: string</span><br><span class="line">//     public age: number</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 场景7 A是一个函数上参数的联合类型变量</span><br><span class="line">// function SS(name:string | number)&#123;</span><br><span class="line">//     let num = name as number + 3</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 场景8 多个类组成的联合类型如何断言</span><br><span class="line">// let a:A | B | C</span><br><span class="line">// a as A</span><br><span class="line">// a as B</span><br><span class="line">// a as C</span><br><span class="line"></span><br><span class="line">// 场景9 转换为any或者unknown类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="类型守卫"><a href="#类型守卫" class="headerlink" title="类型守卫"></a>类型守卫</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">类型守卫需要了解一下new 的过程</span><br><span class="line">class Person &#123;</span><br><span class="line">    name</span><br><span class="line">    age</span><br><span class="line">&#125;</span><br><span class="line">let per = new Person()</span><br><span class="line"></span><br><span class="line">1：创建一个obj对象</span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">2：使创建对象的__proto__指向构造函数/类的prototype</span><br><span class="line">obj.__proto = Person.prototype</span><br><span class="line">3：借用构造函数/类的apply为obj对象添加name与age属性</span><br><span class="line">Person.apply(obj,[&quot;1232&quot;,123])</span><br><span class="line"></span><br><span class="line">类型守卫</span><br><span class="line">在词句的块级作用域内，if语句内或者条目运算符表达式以内，缩小变量类型的一种类型推断的行为</span><br><span class="line">类型守卫产生时机 获得更精准的变量类型，减少不必要的类型断言</span><br><span class="line">类型判断 typeof</span><br><span class="line">属性或方法判断 in 判断属性或者方法是不是在该对象中 &quot;name&quot; in obj     &quot;getname&quot; in obj</span><br><span class="line">实例判断 instanceof</span><br><span class="line">字面量相等判断 == === != !==</span><br><span class="line"></span><br><span class="line">typeof 局限性</span><br><span class="line">检测范围 string | number | bigint | boolean | symbol | undefined | object | function</span><br><span class="line">检测变量并不完全准确</span><br><span class="line">typeof null 结果为object</span><br><span class="line">typeof [] 结果为object</span><br><span class="line"></span><br><span class="line">typeof替代方案</span><br><span class="line">Object.prototype.toString.call(检测对象)</span><br><span class="line">仍然无法解决自定义函数类，使用instanceof</span><br><span class="line"></span><br><span class="line">instanceof</span><br><span class="line">a instanceof b 可用于原型链继承关系 子类 instanceof 父类 左边是否是右边的实例对象 会一直在左边的实例对象的__proto__一直查找到Object的prototype空间</span><br><span class="line"></span><br><span class="line">instanceof应用场景</span><br><span class="line">class car &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Bus &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">car 和 Bus类中各自包含一个求总价的方法</span><br><span class="line">class GetTotal &#123;</span><br><span class="line">    returnTotal(cartype:car | Bus)&#123;</span><br><span class="line">        if(cartype instanceof car)&#123;</span><br><span class="line">            return car.total()</span><br><span class="line">        &#125; else if(cartype instanceof Bus)&#123;</span><br><span class="line">            return Bus.total()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">根据不同车类型返回价格</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="自定义守卫"><a href="#自定义守卫" class="headerlink" title="自定义守卫"></a>自定义守卫</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">自定义守卫</span><br><span class="line">格式</span><br><span class="line">function 函数名 （形参：参数类型/大多为any）：形参 is A类型 = boolean + 类型守卫能力&#123;</span><br><span class="line">    return true / false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isString(str:any):str is string&#123;</span><br><span class="line">    return typeof str === &#x27;string&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isFunc(str:any):str is Function&#123;</span><br><span class="line">    return typeof str === &#x27;function&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">抽象类</span><br><span class="line">一个在任何位置都不能实例化的类就是一个抽象类，实例化无意义的类</span><br><span class="line">包含0个或多个带有方法体的方法和不带有方法体的抽象方法</span><br><span class="line">父类的抽象方法会在子类强制实现</span><br><span class="line">abstract class A &#123;</span><br><span class="line">    public name:string</span><br><span class="line">    public eat()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   public abstract run():void</span><br><span class="line">&#125;</span><br><span class="line">class B extends A &#123;</span><br><span class="line">    public run(): void &#123;</span><br><span class="line">        console.log(&#x27;1232&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let a =  new A() // 抽象类无法实例化</span><br><span class="line"></span><br><span class="line">抽象类扩大，适配器</span><br><span class="line">后端称为适配器adapter</span><br><span class="line">export &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">多态</span><br><span class="line">定义：</span><br><span class="line">父类的对象变量可以接收任何一个子类的对象</span><br><span class="line">从而用这个父类的对象变量来调用子类中重写的方法而输出不同的结果</span><br><span class="line"></span><br><span class="line">产生条件：</span><br><span class="line">1：必须存在继承关系</span><br><span class="line">2：必须有方法重写</span><br><span class="line"></span><br><span class="line">利于项目拓展</span><br><span class="line"></span><br><span class="line">无法调用子类独有方法，必须结合instanceif类型守卫解决</span><br><span class="line">属性不必完全重叠，在继承的情况下</span><br><span class="line">class Father &#123;</span><br><span class="line">    name:string</span><br><span class="line">    eat()&#123;</span><br><span class="line">        console.log(&#x27;父亲吃饭&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A extends Father&#123;</span><br><span class="line">    age:number</span><br><span class="line">    eat()&#123;</span><br><span class="line">        console.log(&#x27;A&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends Father &#123;</span><br><span class="line">    address:string</span><br><span class="line">    eat(): void &#123;</span><br><span class="line">        console.log(&#x27;B&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let fat:Father = new B()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">改写汽车返回价格</span><br><span class="line">class Fat &#123;</span><br><span class="line">    total()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class car extends Fat &#123;</span><br><span class="line">    total()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Bus extends Fat &#123;</span><br><span class="line">    total()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    aaa()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">car 和 Bus类中各自包含一个求总价的方法</span><br><span class="line">class GetTotal &#123;</span><br><span class="line">    returnTotal(cartype: Fat)&#123;</span><br><span class="line">            return cartype.total() // 只能调用total方法 无法调用B类中独有的的aaa方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let gettotal = new GetTotal()</span><br><span class="line">let car = new car()</span><br><span class="line">let bus = new Bus()</span><br><span class="line">gettotal(car)</span><br><span class="line">gettotal(bus)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="新特性可变元祖"><a href="#新特性可变元祖" class="headerlink" title="新特性可变元祖"></a>新特性可变元祖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr:[number,string,string,string] = [123,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">let arr2:[number,string,...any[]] = [123,&#x27;2&#x27;,123,&#x27;456&#x27;] </span><br><span class="line">let [username,age,...rest]:[username_:string,age_:number,...rest:any[]] = [&quot;123&quot;,123,&#x27;456&#x27;]</span><br><span class="line">let [username,age,...rest,desc]:[username_:string,age_:number,...rest:any[],desc_:string] = [&quot;123&quot;,123,&#x27;456&#x27;,&#x27;123&#x27;]</span><br></pre></td></tr></table></figure><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习一下TS吧&quot;&gt;&lt;a href=&quot;#学习一下TS吧&quot; class=&quot;headerlink&quot; title=&quot;学习一下TS吧&quot;&gt;&lt;/a&gt;学习一下TS吧&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="typescript" scheme="https://222cabbage.github.io/categories/typescript/"/>
    
    
    <category term="ts" scheme="https://222cabbage.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>vue2源码</title>
    <link href="https://222cabbage.github.io/2022/07/02/vue2code1/"/>
    <id>https://222cabbage.github.io/2022/07/02/vue2code1/</id>
    <published>2022-07-01T17:37:06.000Z</published>
    <updated>2022-07-17T17:47:01.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue2源码学习"><a href="#Vue2源码学习" class="headerlink" title="Vue2源码学习"></a>Vue2源码学习</h2><p>感觉工作了几个月了，也该看一看源码了，然后就捣鼓出了个盗版vue.js</p><p>实现的功能有模板渲染，生命周期，数据劫持，双向绑定，添加点击事件等很基础的功能，下面是源码</p><p>每天看掘金上的源码理论讲解，什么compile和watcher之类的看麻了，实现一下之后就有很大的感悟</p><p>首先在Vue的类中将$el和$data挂载在实例对象上，方便后续的操作</p><p>模板的编译思想就是，设置正则匹配，获取根节点后，再去获取根节点的子节点，循环去匹配文本节点，利用字符串的replace方法结合正则表达式，匹配到设置了模板字符串的文本节点和键，再利用键从data中获取相应值去替换文本节点</p><p>生命周期简单些，就是传递几个函数，判断类型，如果是函数就执行，顺序不能随便放，执行顺序是固定的，后期需要通过bind改变this指向</p><p>这是html内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">copyvye.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; str &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; b &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;modelStr&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;changeStr&quot;&gt;change str&lt;/button&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; modelStr &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./copyVue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                str:&#x27;hao hello&#x27;,</span><br><span class="line">                b:&#x27;好嗨欧&#x27;,</span><br><span class="line">                modelStr:&#x27;v-model关联字符&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeStr()&#123;</span><br><span class="line">                    this.str = &#x27;我终于更新了&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate() &#123;</span><br><span class="line">                console.log(&#x27;beforeCreate&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            created() &#123;</span><br><span class="line">                console.log(&#x27;created&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount() &#123;</span><br><span class="line">                console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted() &#123;</span><br><span class="line">                console.log(&#x27;mounted&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这是copyVue.js内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">copyVue.js</span><br><span class="line">class Vue &#123;</span><br><span class="line">    constructor(options)&#123;</span><br><span class="line">        if(typeof options.beforeCreate === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeCreate.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.$options = options</span><br><span class="line">        this.$data = options.data</span><br><span class="line">        this.$watchEvent = &#123;&#125;</span><br><span class="line">        this.proxyData()</span><br><span class="line">        this.observe()</span><br><span class="line">        if(typeof options.created === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.created.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        if(typeof options.beforeMount === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeMount.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.$el = document.querySelector(options.el)</span><br><span class="line">        if(typeof options.mounted === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.mounted.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.compile(this.$el)</span><br><span class="line">    &#125;</span><br><span class="line">    // 劫持数据 此时并未更新视图</span><br><span class="line">    proxyData()&#123;</span><br><span class="line">        for(let key in this.$data)&#123;</span><br><span class="line">            Object.defineProperty(this,key,&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return this.$data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                set(val)&#123;</span><br><span class="line">                    this.$data[key] = val</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 数据被修改但是视图并未更新</span><br><span class="line">    observe()&#123;</span><br><span class="line">        for(let key in this.$data)&#123;</span><br><span class="line">            let value = this.$data[key]</span><br><span class="line">            let that = this</span><br><span class="line">            Object.defineProperty(this.$data,key,&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return value</span><br><span class="line">                &#125;,</span><br><span class="line">                set(val)&#123;</span><br><span class="line">                    value = val</span><br><span class="line">                    if(that.$watchEvent[key])&#123;</span><br><span class="line">                        that.$watchEvent[key].forEach(item =&gt; &#123;</span><br><span class="line">                            item.update()</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compile(node)&#123;</span><br><span class="line">        let reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;</span><br><span class="line">        node.childNodes.forEach(item =&gt; &#123;</span><br><span class="line">            // 首先需要判断节点类型</span><br><span class="line">            if(item.nodeType === 1)&#123;</span><br><span class="line">                if(item.hasAttribute(&#x27;@click&#x27;))&#123;</span><br><span class="line">                    let vmKey = item.getAttribute(&#x27;@click&#x27;).trim()</span><br><span class="line">                    item.addEventListener(&#x27;click&#x27;,(event)=&gt;&#123;</span><br><span class="line">                        this.eventFn = this.$options.methods[vmKey].bind(this)</span><br><span class="line">                        this.eventFn(event)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                if(item.hasAttribute(&#x27;v-model&#x27;))&#123;</span><br><span class="line">                    let vmKey = item.getAttribute(&#x27;v-model&#x27;).trim()</span><br><span class="line">                    if(this.hasOwnProperty(vmKey))&#123;</span><br><span class="line">                        item.value = this[vmKey]</span><br><span class="line">                    &#125;</span><br><span class="line">                    item.addEventListener(&#x27;input&#x27;,(event)=&gt;&#123;</span><br><span class="line">                        this[vmKey] = item.value</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                if(item.childNodes.length &gt; 0)&#123;</span><br><span class="line">                   this.compile(item) </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(item.nodeType === 3)&#123;</span><br><span class="line">                // 使用另外一个变量保存文本节点的内容</span><br><span class="line">                let nodeContent = item.textContent</span><br><span class="line">                item.textContent = nodeContent.replace(reg,(match,vmKey)=&gt;&#123;</span><br><span class="line">                    vmKey = vmKey.trim()</span><br><span class="line">                    if(this.hasOwnProperty(vmKey))&#123;</span><br><span class="line">                        let watcher = new Watch(this,vmKey,item,&#x27;textContent&#x27;)</span><br><span class="line">                        if(this.$watchEvent[vmKey])&#123;</span><br><span class="line">                            this.$watchEvent[vmKey].push(watcher)</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            this.$watchEvent[vmKey] = []</span><br><span class="line">                            this.$watchEvent[vmKey].push(watcher)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    return this.$data[vmKey]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Watch &#123;</span><br><span class="line">    constructor(vm,key,node,attr)&#123;</span><br><span class="line">        this.vm = vm</span><br><span class="line">        this.key = key</span><br><span class="line">        this.node = node</span><br><span class="line">        this.attr = attr</span><br><span class="line">    &#125;</span><br><span class="line">    update()&#123;</span><br><span class="line">        this.node[this.attr] = this.vm[this.key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loading……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue2源码学习&quot;&gt;&lt;a href=&quot;#Vue2源码学习&quot; class=&quot;headerlink&quot; title=&quot;Vue2源码学习&quot;&gt;&lt;/a&gt;Vue2源码学习&lt;/h2&gt;&lt;p&gt;感觉工作了几个月了，也该看一看源码了，然后就捣鼓出了个盗版vue.js&lt;/p&gt;
&lt;p&gt;实现的</summary>
      
    
    
    
    <category term="vue框架源码" scheme="https://222cabbage.github.io/categories/vue%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Vue2源码" scheme="https://222cabbage.github.io/tags/Vue2%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>vue2知识回顾</title>
    <link href="https://222cabbage.github.io/2022/06/26/Face2/"/>
    <id>https://222cabbage.github.io/2022/06/26/Face2/</id>
    <published>2022-06-25T17:20:40.000Z</published>
    <updated>2022-07-08T13:22:29.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue2小知识回顾"><a href="#Vue2小知识回顾" class="headerlink" title="Vue2小知识回顾"></a>Vue2小知识回顾</h2><p>以后应该很多项目都会使用上v3了，但是v2也不能忘掉，毕竟学习过，那么现在就来复习一下</p><h3 id="1生命周期"><a href="#1生命周期" class="headerlink" title="1生命周期"></a>1生命周期</h3><p>在vue2的生命周期中，created可以访问到data的数据，访问不到dom根节点el，在mounted中可以同时访问到el和data</p><p>使用keepalive组件缓存路由后组件后，生命周期会触发activated</p><h3 id="2：keepalive"><a href="#2：keepalive" class="headerlink" title="2：keepalive"></a>2：keepalive</h3><p>vue自带组件，防止重复构建和请求，提升性能，新的数据可以从activated生命周期中获取</p><h3 id="3：v-show和v-if"><a href="#3：v-show和v-if" class="headerlink" title="3：v-show和v-if"></a>3：v-show和v-if</h3><p>v-if完全的删除以及创建dom’盒子</p><p>v-show是display：none，会造成回流以及重绘问题，不占位</p><p>初次加载v-if好，重复显示与隐藏v-show更好</p><h3 id="4：v-if和v-for的优先级"><a href="#4：v-if和v-for的优先级" class="headerlink" title="4：v-if和v-for的优先级"></a>4：v-if和v-for的优先级</h3><p>v2中v-for的优先级比v-if高，v3相反</p><p>在源码中体现，genElement函数中</p><h3 id="5：ref"><a href="#5：ref" class="headerlink" title="5：ref"></a>5：ref</h3><p>帮助获取dom，vue的语法糖，方便快捷获取dom信息</p><p>配合nextTick使用</p><h3 id="6：nextTick"><a href="#6：nextTick" class="headerlink" title="6：nextTick"></a>6：nextTick</h3><p>获取更新后的data和dom内容，异步</p><h3 id="7：scope原理"><a href="#7：scope原理" class="headerlink" title="7：scope原理"></a>7：scope原理</h3><p>使样式只在当前页面生效，不会全局影响样式</p><p>原理：给节点新增自定义属性data-v-xxxxx，利用css属性选择器添加样式</p><p>div[data-v-xxxx] {</p><p>} </p><div data-v-xxxxx></div><div></div><h3 id="8：样式穿透"><a href="#8：样式穿透" class="headerlink" title="8：样式穿透"></a>8：样式穿透</h3><p>对于外来第三方的组件想要修改样式</p><p>1:scss：父元素 &#x2F;deep&#x2F;  想要修改样式的组件类名 {</p><p>​color:red</p><p>}</p><p>2:stylus：lang&#x3D;”stylus”</p><p>父元素 &gt;&gt;&gt;  想要修改样式的组件类名 {</p><p>​color:red</p><p>}</p><p>3:::v-deep</p><h3 id="9：父子组件通信-自定义props"><a href="#9：父子组件通信-自定义props" class="headerlink" title="9：父子组件通信 自定义props"></a>9：父子组件通信 自定义props</h3><h3 id="10：子传父-自定义事件"><a href="#10：子传父-自定义事件" class="headerlink" title="10：子传父 自定义事件"></a>10：子传父 自定义事件</h3><p>this.$emit(event,data)</p><h3 id="11：兄弟"><a href="#11：兄弟" class="headerlink" title="11：兄弟"></a>11：兄弟</h3><p>eventBus，bus.js</p><p>import Vue from vue</p><p>export default new Vue</p><p>import bus from ‘bus.js’</p><p>bus.$emit()</p><p>bus.$on()</p><h3 id="14：computed，watch，methods"><a href="#14：computed，watch，methods" class="headerlink" title="14：computed，watch，methods"></a>14：computed，watch，methods</h3><p>computed对比methods：</p><p>computed具有缓存，基于响应式的依赖，依赖不变就不会调用，走第一次缓存</p><p>methods：无缓存，重复调用</p><p>computed对比watch：</p><p>watch：监听数据或者路由发生改变才可以响应执行，是当前监听数据发生改变才会执行</p><p>computed：无需发生改变，如果影响计算属性值的某个属性改变，就会触发，多对一</p><h3 id="15：vue设置代理"><a href="#15：vue设置代理" class="headerlink" title="15：vue设置代理"></a>15：vue设置代理</h3><p>看看vue-ccli官网中的devServer配置，解决开发时的跨域问题</p><p>publicPath：‘.&#x2F;’，</p><p>devServer ：{</p><p>​proxy：需要代理的地址</p><p>}</p><p>代理在打包完成后是不生效的</p><p>可以去xiaoluxian.cn网站去看看打包完后会发生的一些问题</p><h3 id="16：打包路径和路由模式"><a href="#16：打包路径和路由模式" class="headerlink" title="16：打包路径和路由模式"></a>16：打包路径和路由模式</h3><p>history</p><p>hash</p><p>直观点的区分就是#</p><p>打包完后出现的空白页是怎么回事？</p><p>默认打包后引入的js资源等文件是以&#x2F;开头，要修改成.&#x2F;</p><p>publicPath：‘.&#x2F;’</p><p>后续会出现点击跳转错误问题，是因为路由模式的原因，将history模式改成hash就没事</p><p>如果既想要模式是history，又想看到内容</p><p>就需要和后端说一下，注意地址的问题，让他做重定向</p><h3 id="17：代理和环境变量"><a href="#17：代理和环境变量" class="headerlink" title="17：代理和环境变量"></a>17：代理和环境变量</h3><p>打包完后代理不生效了</p><p>需要设置模式和环境变量</p><p>生产模式和开发模式</p><p>.env.development</p><p>.env.production</p><p>axios封装时判断请求根路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">axios（options）&#123;</span><br><span class="line"></span><br><span class="line">let baseUrl = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">if(process.env.VUE_APP_ENV === &#x27;dev&#x27;)&#123;</span><br><span class="line"></span><br><span class="line"> baseUrl = options.url</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">baseUrl  = process.env.VUE_APP_BASE_API + options.url</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return axios(&#123;</span><br><span class="line"></span><br><span class="line">url = baseUrl</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="18：props和data的优先级"><a href="#18：props和data的优先级" class="headerlink" title="18：props和data的优先级"></a>18：props和data的优先级</h3><p>在源码的initState</p><p>1：props最先</p><p>2：之后是methods</p><p>3：再然后是data</p><p>4：computed</p><p>5：watch</p><h3 id="19：VueX"><a href="#19：VueX" class="headerlink" title="19：VueX"></a>19：VueX</h3><p>专门为vue设计的管理状态的工具</p><p>有什么属性？</p><p>state类似data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapState&#125; from vuex</span><br><span class="line"></span><br><span class="line">computed:&#123;</span><br><span class="line"></span><br><span class="line">...mapState([&#x27;name&#x27;,&#x27;age&#x27;])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>getters类似computed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line"></span><br><span class="line">changeStr()&#123;</span><br><span class="line"></span><br><span class="line">return state.name + state.age</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import &#123; mapGetters &#125; from vuex</span><br><span class="line"></span><br><span class="line">computed:&#123;</span><br><span class="line"></span><br><span class="line">...mapGetters([&#x27;changeStr&#x27;])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mutations类似methods</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from vuex</span><br><span class="line">methods:&#123;</span><br><span class="line">    ...mapMutations([&#x27;changeSome&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actions类似异步的methods，提交的是mutaions。而不是直接修改state</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">submit(&#123;commit&#125;,state)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">impot &#123; mapActions &#125; from vuex</span><br><span class="line">methods:&#123;</span><br><span class="line">    ...mapActions([&#x27;submit&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>modules吧以上四个属性再细分，模块化仓库更好管理</p><p>vuex是单项数据流，单相思</p><p>vuex持久化存储</p><p>本身不是持久化存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方式1</span><br><span class="line">state:&#123;</span><br><span class="line">  num:localStorage.getItem(&#x27;num&#x27;) || 1  </span><br><span class="line">&#125;,</span><br><span class="line">add（）&#123;</span><br><span class="line">    state.num++</span><br><span class="line">    localStorage.setItem(&#x27;num&#x27;,state.num)</span><br><span class="line">&#125;</span><br><span class="line">方式2 使用插件 自行百度vuex持久化插件</span><br></pre></td></tr></table></figure><h3 id="20：vue-router-路由"><a href="#20：vue-router-路由" class="headerlink" title="20：vue-router 路由"></a>20：vue-router 路由</h3><p>路由模式</p><p>hash</p><p>history</p><p>区别：</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>history在跳转无效路由时，会发送一个请求 &#x2F;about&#x2F;id</p><p>打包后前端自测需要使用hash，如果使用history会出现空白页</p><h3 id="21：SPA"><a href="#21：SPA" class="headerlink" title="21：SPA"></a>21：SPA</h3><p>SPA单页面应用</p><p>缺点是SEO优化不好，SEO多页面更好</p><p>性能不是特别好，所有页面都牵扯到一个页面，可能会涉及到重绘和重排</p><h3 id="22：路由路径传值"><a href="#22：路由路径传值" class="headerlink" title="22：路由路径传值"></a>22：路由路径传值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">显式</span><br><span class="line">this.router.push(&#123;</span><br><span class="line">path:&#x27;/about&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">        a:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">/about?a=1</span><br><span class="line">this.$route.query</span><br><span class="line"></span><br><span class="line">隐式</span><br><span class="line">this.router.push(&#123;</span><br><span class="line">name:&#x27;About&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">        a:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">/about</span><br><span class="line">this.$route.params</span><br></pre></td></tr></table></figure><h3 id="23：路由导航守卫-具体自行百度"><a href="#23：路由导航守卫-具体自行百度" class="headerlink" title="23：路由导航守卫 具体自行百度"></a>23：路由导航守卫 具体自行百度</h3><p>全局</p><p>路由独享</p><p>组件内</p><p>使用场景较多的是，在进入页面时，判断有无登陆，无登陆就跳转登录页，有登陆就进行后续操作</p><h3 id="24：动态路由"><a href="#24：动态路由" class="headerlink" title="24：动态路由"></a>24：动态路由</h3><p>使用场景：详情页</p><p>&#x2F;detail&#x2F;1</p><p>&#x2F;detail&#x2F;2</p><p>path：’&#x2F;detail&#x2F;:id’</p><h3 id="25：源码-模板编译"><a href="#25：源码-模板编译" class="headerlink" title="25：源码 模板编译"></a>25：源码 模板编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">haovue.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;str&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &#123;&#123; str &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./haovue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new HaoVue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                str:&#x27;hello hao&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">haovue.js</span><br><span class="line">class HaoVue &#123;</span><br><span class="line">    constructor(options)&#123;</span><br><span class="line">        this.$el = document.querySelector(options.el)</span><br><span class="line">        this.$data = options.data</span><br><span class="line">        this.compile(this.$el)</span><br><span class="line">    &#125;</span><br><span class="line">    compile(node)&#123;</span><br><span class="line">        node.childNodes.forEach(item =&gt; &#123;</span><br><span class="line">            // 判断节点类型 元素节点是1 文本节点是3 如果有&#123; &#123; &#125; &#125;就替换</span><br><span class="line">            if(item.nodeType == 1)&#123;</span><br><span class="line">                this.compile(item)</span><br><span class="line">            &#125;</span><br><span class="line">            if(item.nodeType == 3)&#123;</span><br><span class="line">                let reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;</span><br><span class="line">                let text = item.textContent;</span><br><span class="line">                item.textContent = text.replace(reg,(match,vmKey)=&gt;&#123;</span><br><span class="line">                    vmKey = vmKey.trim()</span><br><span class="line">                    return this.$data[vmKey]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26：源码-生命周期"><a href="#26：源码-生命周期" class="headerlink" title="26：源码 生命周期"></a>26：源码 生命周期</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">haovue.js</span><br><span class="line">class HaoVue &#123;</span><br><span class="line">    constructor(options)&#123;</span><br><span class="line">        console.log(options)</span><br><span class="line">        // 需要改变this指向才能访问el和data 因为此时声明周期在组件的实例中</span><br><span class="line">        if(typeof options.beforeCreate === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeCreate.bind(this)()</span><br><span class="line">            console.log(this.$data,this.$el)</span><br><span class="line">        &#125;</span><br><span class="line">        this.$data = options.data</span><br><span class="line">        if(typeof options.created === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.created.bind(this)()</span><br><span class="line">            console.log(this.$data,this.$el)</span><br><span class="line">        &#125;</span><br><span class="line">        if(typeof options.beforeMount === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeMount.bind(this)()</span><br><span class="line">            console.log(this.$data,this.$el)</span><br><span class="line">        &#125;</span><br><span class="line">        this.$el = document.querySelector(options.el)</span><br><span class="line">        if(typeof options.mounted === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.mounted.bind(this)()</span><br><span class="line">            console.log(this.$data,this.$el)</span><br><span class="line">        &#125;</span><br><span class="line">        this.compile(this.$el)</span><br><span class="line">    &#125;</span><br><span class="line">    compile(node)&#123;</span><br><span class="line">        node.childNodes.forEach(item =&gt; &#123;</span><br><span class="line">            // 判断节点类型 元素节点是1 文本节点是3 如果有&#123; &#123; &#125; &#125;就替换</span><br><span class="line">            if(item.nodeType == 1)&#123;</span><br><span class="line">                this.compile(item)</span><br><span class="line">            &#125;</span><br><span class="line">            if(item.nodeType == 3)&#123;</span><br><span class="line">                let reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;</span><br><span class="line">                let text = item.textContent;</span><br><span class="line">                item.textContent = text.replace(reg,(match,vmKey)=&gt;&#123;</span><br><span class="line">                    vmKey = vmKey.trim()</span><br><span class="line">                    return this.$data[vmKey]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">haovue.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;str&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &#123;&#123; str &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./haovue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new HaoVue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                str:&#x27;hello hao&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate()&#123;</span><br><span class="line">                console.log(&#x27;beforeCreate&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            created()&#123;</span><br><span class="line">                console.log(&#x27;created&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount()&#123;</span><br><span class="line">                console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted()&#123;</span><br><span class="line">                console.log(&#x27;mounted&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="27：源码-添加事件"><a href="#27：源码-添加事件" class="headerlink" title="27：源码 添加事件"></a>27：源码 添加事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;str&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &#123;&#123; str &#125;&#125;</span><br><span class="line">        &lt;button @click=&quot;btnClick&quot;&gt;点击事件&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./haovue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new HaoVue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                str:&#x27;hello hao&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate()&#123;</span><br><span class="line">                console.log(&#x27;beforeCreate&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            created()&#123;</span><br><span class="line">                console.log(&#x27;created&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount()&#123;</span><br><span class="line">                console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted()&#123;</span><br><span class="line">                console.log(&#x27;mounted&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                btnClick()&#123;</span><br><span class="line">                    alert(this.str + &#x27;按钮点击&#x27;) // 此时无法直接this.str使用 得放到数据劫持中</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class HaoVue &#123;</span><br><span class="line">    constructor(options)&#123;</span><br><span class="line">        this.$options = options</span><br><span class="line">        // 需要改变this指向才能访问el和data 因为此时声明周期在组件的实例中</span><br><span class="line">        if(typeof options.beforeCreate === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeCreate.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.$data = options.data</span><br><span class="line">        if(typeof options.created === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.created.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        if(typeof options.beforeMount === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeMount.bind(this)(</span><br><span class="line">        &#125;</span><br><span class="line">        this.$el = document.querySelector(options.el)</span><br><span class="line">        if(typeof options.mounted === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.mounted.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.compile(this.$el)</span><br><span class="line">    &#125;</span><br><span class="line">    compile(node)&#123;</span><br><span class="line">        node.childNodes.forEach(item =&gt; &#123;</span><br><span class="line">            // 判断节点类型 元素节点是1 文本节点是3 如果有&#123; &#123; &#125; &#125;就替换</span><br><span class="line">            if(item.nodeType == 1)&#123;</span><br><span class="line">                // 判断是否包含属性</span><br><span class="line">                if(item.hasAttribute(&#x27;@click&#x27;))&#123;</span><br><span class="line">                    let vmKey = item.getAttribute(&#x27;@click&#x27;).trim()</span><br><span class="line">                    item.addEventListener(&#x27;click&#x27;,(event)=&gt;&#123;</span><br><span class="line">                        this.eventFn = this.$options.methods[vmKey].bind(this)</span><br><span class="line">                        this.eventFn(event)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                if(item.childNodes.length &gt; 0)&#123;</span><br><span class="line">                  this.compile(item)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            if(item.nodeType == 3)&#123;</span><br><span class="line">                let reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;</span><br><span class="line">                let text = item.textContent;</span><br><span class="line">                item.textContent = text.replace(reg,(match,vmKey)=&gt;&#123;</span><br><span class="line">                    vmKey = vmKey.trim()</span><br><span class="line">                    return this.$data[vmKey]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="28：源码-劫持"><a href="#28：源码-劫持" class="headerlink" title="28：源码 劫持"></a>28：源码 劫持</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haovue.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">haovue.js</span><br><span class="line">    this.$data = options.data</span><br><span class="line">    this.proxyData()</span><br><span class="line">    proxyData()&#123;</span><br><span class="line">        for(let key in this.$data)&#123;</span><br><span class="line">            Object.defineProperty(this,key,&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return this.$data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                set(value)&#123;</span><br><span class="line">                    this.$data[key] = value</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            // 此时虽然数据被修改，但是视图没修改</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="29：更新视图"><a href="#29：更新视图" class="headerlink" title="29：更新视图"></a>29：更新视图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">haovue.html</span><br><span class="line"> btnClick(e)&#123;</span><br><span class="line"> this.str = &#x27;一点都不好&#x27;</span><br><span class="line"> console.log(this) // 此时无法直接this.str使用 得放到数据劫持中</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">haovue.js</span><br><span class="line">class HaoVue &#123;</span><br><span class="line">    constructor(options)&#123;</span><br><span class="line">        this.$options = options</span><br><span class="line">        this.$watchEvent = &#123;&#125;</span><br><span class="line">        // 需要改变this指向才能访问el和data 因为此时声明周期在组件的实例中</span><br><span class="line">        if(typeof options.beforeCreate === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeCreate.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.$data = options.data</span><br><span class="line">        this.proxyData()</span><br><span class="line">        this.observe()</span><br><span class="line">        if(typeof options.created === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.created.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        if(typeof options.beforeMount === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.beforeMount.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.$el = document.querySelector(options.el)</span><br><span class="line">        if(typeof options.mounted === &#x27;function&#x27;)&#123;</span><br><span class="line">            options.mounted.bind(this)()</span><br><span class="line">        &#125;</span><br><span class="line">        this.compile(this.$el)</span><br><span class="line">    &#125;</span><br><span class="line">    // 将data中的数据挂载在原型上 使得页面通过this.xxx的方式能够访问到</span><br><span class="line">    // 并且进行数据劫持 当data中的数据更新 原型上的数据也要更新 双向绑定 劫持</span><br><span class="line">    proxyData()&#123;</span><br><span class="line">        for(let key in this.$data)&#123;</span><br><span class="line">            Object.defineProperty(this,key,&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return this.$data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                set(value)&#123;</span><br><span class="line">                    this.$data[key] = value</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 此时虽然数据被修改，但是视图没修改</span><br><span class="line">    observe()&#123;</span><br><span class="line">        for(let key in this.$data)&#123;</span><br><span class="line">            let value = this.$data[key]</span><br><span class="line">            let that = this</span><br><span class="line">            Object.defineProperty(this.$data,key,&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return value</span><br><span class="line">                &#125;,</span><br><span class="line">                set(val)&#123;</span><br><span class="line">                    value = val</span><br><span class="line">                    if(that.$watchEvent[key])&#123;</span><br><span class="line">                        that.$watchEvent[key].forEach(item=&gt;&#123;</span><br><span class="line">                            item.update()</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 编译</span><br><span class="line">    compile(node)&#123;</span><br><span class="line">        node.childNodes.forEach(item =&gt; &#123;</span><br><span class="line">            // 判断节点类型 元素节点是1 文本节点是3 如果有&#123; &#123; &#125; &#125;就替换</span><br><span class="line">            if(item.nodeType == 1)&#123;</span><br><span class="line">                // 判断是否包含属性</span><br><span class="line">                if(item.hasAttribute(&#x27;@click&#x27;))&#123;</span><br><span class="line">                    let vmKey = item.getAttribute(&#x27;@click&#x27;).trim()</span><br><span class="line">                    item.addEventListener(&#x27;click&#x27;,(event)=&gt;&#123;</span><br><span class="line">                        this.eventFn = this.$options.methods[vmKey].bind(this)</span><br><span class="line">                        this.eventFn(event)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                if(item.childNodes.length &gt; 0)&#123;</span><br><span class="line">                  this.compile(item)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(item.nodeType == 3)&#123;</span><br><span class="line">                let reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;</span><br><span class="line">                let text = item.textContent;</span><br><span class="line">                item.textContent = text.replace(reg,(match,vmKey)=&gt;&#123;</span><br><span class="line">                    vmKey = vmKey.trim()</span><br><span class="line">                    if(this.hasOwnProperty(vmKey))&#123;</span><br><span class="line">                        let watcher = new Watch(this,vmKey,item,&#x27;textContent&#x27;)</span><br><span class="line">                        if(this.$watchEvent[vmKey])&#123;</span><br><span class="line">                            this.$watchEvent[vmKey].push(watcher)</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            this.$watchEvent[vmKey] = []</span><br><span class="line">                            this.$watchEvent[vmKey].push(watcher)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    return this.$data[vmKey]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Watch &#123;</span><br><span class="line">    constructor(vm,key,node,attr)&#123;</span><br><span class="line">        // 对象</span><br><span class="line">        this.vm = vm</span><br><span class="line">        // 属性名称</span><br><span class="line">        this.key = key</span><br><span class="line">        // 节点</span><br><span class="line">        this.node = node</span><br><span class="line">        // 改变文本节点的内容字符串</span><br><span class="line">        this.attr = attr</span><br><span class="line">    &#125;</span><br><span class="line">    // 执行改变update操作</span><br><span class="line">    update()&#123;</span><br><span class="line">        this.node[this.attr] = this.vm[this.key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="30：diff算法"><a href="#30：diff算法" class="headerlink" title="30：diff算法"></a>30：diff算法</h3><p>算法，提升性能，vue和react都有使用和改良，与dom有关系，虚拟dom，数据，将dom数据化</p><p>不断的修改dom是十分耗费性能的，因此将dom转换为数据 </p><p>vue和react中的diff算法主要借鉴了snabbdom和virtual-dom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">搭建snabbdom环境</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack@5 webpack-cli@3 webpack-dev-server@3 -S</span><br><span class="line">npm install snabbdom -S</span><br><span class="line">创建一个webpack.config.js</span><br><span class="line">配置</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        index:&quot;./src/index.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:__dirname + &quot;/public&quot;,</span><br><span class="line">        filename:&quot;./js/[name].js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase:&quot;./public&quot;,</span><br><span class="line">        inline:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">修改package.json配置</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>一个简单的snabbdom环境就搭建好了</p><h3 id="31：v-model"><a href="#31：v-model" class="headerlink" title="31：v-model"></a>31：v-model</h3><p>首选通过defineProperty劫持数据发生的改变，如果数据改变了就触发set的update，进行更新节点内容，从而实现双向绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">compile(node)&#123;</span><br><span class="line">        node.childNodes.forEach(item =&gt; &#123;</span><br><span class="line">            // 判断节点类型 元素节点是1 文本节点是3 如果有&#123; &#123; &#125; &#125;就替换</span><br><span class="line">            if(item.nodeType == 1)&#123;</span><br><span class="line">                // 判断是否包含属性</span><br><span class="line">                if(item.hasAttribute(&#x27;@click&#x27;))&#123;</span><br><span class="line">                    let vmKey = item.getAttribute(&#x27;@click&#x27;).trim()</span><br><span class="line">                    item.addEventListener(&#x27;click&#x27;,(event)=&gt;&#123;</span><br><span class="line">                        this.eventFn = this.$options.methods[vmKey].bind(this)</span><br><span class="line">                        this.eventFn(event)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                // 判断元素节点是否添加了v-model</span><br><span class="line">                if(item.hasAttribute(&#x27;v-model&#x27;))&#123;</span><br><span class="line">                    let vmKey = item.getAttribute(&#x27;v-model&#x27;).trim()</span><br><span class="line">                    if(this.hasOwnProperty(vmKey))&#123;</span><br><span class="line">                        item.value = this[vmKey]</span><br><span class="line">                    &#125;</span><br><span class="line">                    item.addEventListener(&#x27;input&#x27;,(event)=&gt;&#123;</span><br><span class="line">                        this[vmKey] = item.value</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                if(item.childNodes.length &gt; 0)&#123;</span><br><span class="line">                  this.compile(item)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(item.nodeType == 3)&#123;</span><br><span class="line">                let reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;</span><br><span class="line">                let text = item.textContent;</span><br><span class="line">                item.textContent = text.replace(reg,(match,vmKey)=&gt;&#123;</span><br><span class="line">                    vmKey = vmKey.trim()</span><br><span class="line">                    if(this.hasOwnProperty(vmKey))&#123;</span><br><span class="line">                        let watcher = new Watch(this,vmKey,item,&#x27;textContent&#x27;)</span><br><span class="line">                        if(this.$watchEvent[vmKey])&#123;</span><br><span class="line">                            this.$watchEvent[vmKey].push(watcher)</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            this.$watchEvent[vmKey] = []</span><br><span class="line">                            this.$watchEvent[vmKey].push(watcher)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    return this.$data[vmKey]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="32：snabbdom"><a href="#32：snabbdom" class="headerlink" title="32：snabbdom"></a>32：snabbdom</h3><p>虚拟节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    children:undefined,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    elm:h1,</span><br><span class="line">    key:undefined,</span><br><span class="line">    sel:&#x27;h1&#x27;,</span><br><span class="line">    text:&#x27;你好h1&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;你好h1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>新老节点替换规则</p><p>如果新老节点不是同一个节点名称，那么久脑力删除旧的，创建插入新的节点</p><p>判断是否是同一节点是通过key判断的</p><p>添加key能够提升性能 key是唯一标识</p><p> 只能同级比较，跨层直接暴力删除</p><p>如果是相同节点 情况更复杂，两种</p><p>新节点没有children，证明是文本节点，直接覆盖</p><p>新节点有children，分为两种</p><p>新的有children，旧的也有children，diff核心，永远都是从旧节点第一个child开始匹配</p><p>旧前，新前</p><p>旧节点和新节点的第一个相等，那么旧节点和新节点指针相加</p><p>旧后，新后</p><p>旧节点和新节点的最后一个相等，那么旧节点和新节点指针都–</p><p>旧前，新后</p><p>旧节点第一个和新节点的最后一个相等，那么旧节点指针加加和新节点指针–</p><p>旧后，新前</p><p>旧节点最后一个一个和新节点的最后一个相等，那么旧节点指针加加和新节点指针–</p><p>以上都不满足</p><p>创建和删除</p><p>新的有children，旧的没有，创建元素添加，吧旧的内容添加创建新的插入</p><h3 id="33：手写diff算法，生成虚拟dom"><a href="#33：手写diff算法，生成虚拟dom" class="headerlink" title="33：手写diff算法，生成虚拟dom"></a>33：手写diff算法，生成虚拟dom</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">h.js</span><br><span class="line">import vnode from &#x27;./vnode&#x27;</span><br><span class="line">export default function(sel,data,params)&#123;</span><br><span class="line">    if(typeof params === &#x27;string&#x27;)&#123;</span><br><span class="line">        // h的第三个参数是字符串类型 意味着他没有子元素</span><br><span class="line">        return vnode(sel,data,undefined,params,undefined)</span><br><span class="line">    &#125;else if(Array.isArray(params))&#123;</span><br><span class="line">        let child = []</span><br><span class="line">        for(let item of params)&#123;</span><br><span class="line">           child.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">        return vnode(sel,data,child,undefined,undefined)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vnode.js</span><br><span class="line">export default function(sel,data,children,text,ele)&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        sel,</span><br><span class="line">        data,</span><br><span class="line">        children,</span><br><span class="line">        text,</span><br><span class="line">        ele</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index.js</span><br><span class="line">import h from &#x27;./dom/h&#x27;</span><br><span class="line">// let vnode = h(&#x27;div&#x27;,&#123;&#125;,&#x27;hello&#x27;)</span><br><span class="line">let vnode = h(&#x27;div&#x27;,&#123;&#125;,[</span><br><span class="line">  h(&#x27;h1&#x27;,&#123;&#125;,&#x27;ni&#x27;),</span><br><span class="line">  h(&#x27;h1&#x27;,&#123;&#125;,&#x27;ni2&#x27;),</span><br><span class="line">  h(&#x27;h1&#x27;,&#123;&#125;,&#x27;ni3&#x27;),</span><br><span class="line">])</span><br><span class="line">console.log(vnode)</span><br></pre></td></tr></table></figure><h3 id="34：手写diff算法，patch不是同一节点"><a href="#34：手写diff算法，patch不是同一节点" class="headerlink" title="34：手写diff算法，patch不是同一节点"></a>34：手写diff算法，patch不是同一节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="35：手写diff算法，相同节点有无children-上"><a href="#35：手写diff算法，相同节点有无children-上" class="headerlink" title="35：手写diff算法，相同节点有无children 上"></a>35：手写diff算法，相同节点有无children 上</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="36：手写diff算法，相同节点有无children-中"><a href="#36：手写diff算法，相同节点有无children-中" class="headerlink" title="36：手写diff算法，相同节点有无children 中"></a>36：手写diff算法，相同节点有无children 中</h3><h3 id="37：手写diff算法，相同节点有无children-下"><a href="#37：手写diff算法，相同节点有无children-下" class="headerlink" title="37：手写diff算法，相同节点有无children 下"></a>37：手写diff算法，相同节点有无children 下</h3><h3 id="38：MVVM"><a href="#38：MVVM" class="headerlink" title="38：MVVM"></a>38：MVVM</h3><p>出现的原因：</p><p>web1.0时代，前后端代码都在一起</p><p>前后端代码都是一个人开发，技术没有侧重点，责任不够细分</p><p>项目不好维护</p><p>mvc都是后端先出的，htmlcssjs页面没有，后端无法工作</p><p>web2.0时代</p><p>ajax出现了，前端后端数据分离</p><p>解决问题，后端不用等前端页面弄完，后端做后端，前端做前端，</p><p>单页面，html和css，js都在一个页面，单个页面也会出现不好维护的情况，但是比1.0好</p><p>出现前端mvvm框架，前端出现过mvc框架，但是被mvvm干掉了</p><p>解决问题，吧大页面进行拆分，单个组件进行维护</p><p>什么是mvvm</p><p>model，view，view model的缩写</p><p>view，视图，页面展现的内容</p><p>model，数据模型，数据层，data</p><p>view model 视图模型层 就是vue源码将视图和数据结合的实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue2小知识回顾&quot;&gt;&lt;a href=&quot;#Vue2小知识回顾&quot; class=&quot;headerlink&quot; title=&quot;Vue2小知识回顾&quot;&gt;&lt;/a&gt;Vue2小知识回顾&lt;/h2&gt;&lt;p&gt;以后应该很多项目都会使用上v3了，但是v2也不能忘掉，毕竟学习过，那么现在就来复习一</summary>
      
    
    
    
    <category term="面试" scheme="https://222cabbage.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试题" scheme="https://222cabbage.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>来看看mysql</title>
    <link href="https://222cabbage.github.io/2022/06/12/mysql1/"/>
    <id>https://222cabbage.github.io/2022/06/12/mysql1/</id>
    <published>2022-06-12T15:55:45.000Z</published>
    <updated>2022-07-06T16:42:58.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库mysql的学习"><a href="#数据库mysql的学习" class="headerlink" title="数据库mysql的学习"></a>数据库mysql的学习</h2><p>SQL语句</p><p>mysql –version 查看数据库版本</p><p>终端连接</p><p>mysql -uroot -p密码</p><p>mysql -uroot -phaoge666</p><p>进入mysql模式，</p><p>输入show databases可以查看所有数据库 不规范</p><p>创建数据库-表</p><p>create database 名字；</p><p>查看当前使用的数据库</p><p>select database()；</p><p>use haotest；</p><p>查看当前使用数据库中的表</p><p>show tables；</p><p>建表</p><p>create table 名字（</p><p>name varchar(10),</p><p>age int,</p><p>height double)</p><p>select * from haotable</p><p>插入数据</p><p>insert into users（name,age,height） values (‘hao’,22,165);</p><h4 id="命令行敲太麻烦-使用GUI"><a href="#命令行敲太麻烦-使用GUI" class="headerlink" title="命令行敲太麻烦 使用GUI"></a>命令行敲太麻烦 使用GUI</h4><p>几种GUI工具推荐</p><p>Navicat后续收费，SQLYog免费，TablePlus免费限制较多</p><p>从b站上找到好心的up猪弄来了navicat的绿色版本，根据up猪的指导完成破解</p><p>新建连接</p><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><p>关键字大写 CREATE SHOW TABLE DATABASE 。。。。</p><p>一条语句结尾需要;</p><p>遇到关键字表明字段昵称 可以使用 包裹CREATE TABLE <code>moment</code></p><p>语句分类</p><p>DDL语句，数据定义语言，通过DDL语句对数据库或者表进行创建删除修改</p><p>DML，数据操作语言，对表进行添加删除修改</p><p>DQL，数据查询语言，可以从数据库中查询记录</p><p>DCL，数据控制语言，对数据库，表的权限访问进行控制</p><p>删除数据库</p><p>DROP database  IF EXISTS haotest;</p><p>SHOW TABLES</p><p>CREATE TABLE IF NOT EXISTS  <code>students</code> ()</p><h4 id="MYSQL的数据类型"><a href="#MYSQL的数据类型" class="headerlink" title="MYSQL的数据类型"></a>MYSQL的数据类型</h4><p>数字类型：INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT</p><p>浮点数：FLOAT，DOUBLE（float是4个字节，double是八个）单精度浮点数，双精度浮点数</p><p>准确数字类型：DECIMAL，NUMERIC（decimal是numeric的实现形式）</p><p>日期类型：YEAR：只有年份，date：只有年份和月日，没有时间，DATETIME：既有年月日也有时分秒</p><p>TIMESTAMP和DATETIME类似，但是时间范围是UTC的时间范围，都可以表示微秒，如果想自由设置时间就选择DATETIME</p><p>都有各自支持的时间范围</p><p>字符串类型：</p><p>CHAR，创建时为固定长度，一般是0-255之间，在被查询时，会删掉后面的空格，一个字节</p><p>VARCHAR是可变长度的字符串类型，长度可以是0-65535的任意值。在被查询时，不会删掉后面的空格</p><p>BINARY和VARBINARY是存储二进制的字符串</p><p>BLOB是用于存储比较大的二进制类型</p><p>TEXT是用于存储大的字符串类型</p><h4 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h4><p>主键：PRIMARY KEY</p><p>一张表中为了记录每一条记录的唯一性，必须有一个字段永远不重复，并且不会为空，这就是主键，主键是表中唯一的索引，必须是NOT NULL，不主动设置，数据库也会自动设置成NOT NULL</p><p>主键也可以是多列索引，一般称为联合主键，</p><p>开发中主键和业务是无关的，尽量不要使用业务字段作为主键</p><p>唯一：UNIQUE</p><p>有些字段是唯一的，不会重复的，身份证等，用UNIQUE约束，使用后该字段必须不相等，允许列值包含多个null</p><p>不能为空：NOT NULL不能为空</p><p>默认：:DEFAULT</p><p>自动递增：AUTO_INCREMENT，id</p><p>外键约束：多表关系适用</p><h4 id="创建一个完整的表"><a href="#创建一个完整的表" class="headerlink" title="创建一个完整的表"></a>创建一个完整的表</h4><p>CREATE TABLE IF NOT EXISTS <code>students</code> (<br>    id INT PRIMARY KEY AUTO_INCREMENT,<br>    name VARCHAR(20),<br>    age INT DEFAULT 0,<br>    phoneNum VARCHAR(20) UNIQUE DEFAULT ‘’,<br>    createTime TIMESTAMP<br>);</p><p>修改创建完后的表</p><h5 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h5><p>ALTER TABLE <code>students</code> RENAME TO <code>haos</code>;</p><h5 id="添加新的列"><a href="#添加新的列" class="headerlink" title="添加新的列"></a>添加新的列</h5><p>ALTER TABLE <code>haos</code> ADD <code>updateTime</code> TIMESTAMP;</p><h5 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h5><p>ALTER TABLE <code>haos</code> CHANGE <code>phoneNUm</code> <code>tel</code> VARCHAR(20); </p><h5 id="修改字段类型"><a href="#修改字段类型" class="headerlink" title="修改字段类型"></a>修改字段类型</h5><p>ALTER TABLE <code>haos</code> MODIFY <code>name</code> VARCHAR(30);</p><h5 id="删除一个字段"><a href="#删除一个字段" class="headerlink" title="删除一个字段"></a>删除一个字段</h5><p>ALTER TABLE <code>haos</code> DROP <code>tel</code>;</p><h5 id="根据一个表结构创建另一个表"><a href="#根据一个表结构创建另一个表" class="headerlink" title="根据一个表结构创建另一个表"></a>根据一个表结构创建另一个表</h5><p>CREATE TABLE <code>user2</code> LIKE <code>haos</code>;</p><h5 id="根据其他表的所有内容创建"><a href="#根据其他表的所有内容创建" class="headerlink" title="根据其他表的所有内容创建"></a>根据其他表的所有内容创建</h5><p>CREATE TABLE <code>user3</code> (SELECT * FROM <code>user2</code>);</p><p>只复制内容，其他东西不复制</p><h4 id="DML语句-对数据库进行增删改"><a href="#DML语句-对数据库进行增删改" class="headerlink" title="DML语句 对数据库进行增删改"></a>DML语句 对数据库进行增删改</h4><p>插入</p><p>INSERT INTO <code>users</code> VLUES（100,’hoage’）；</p><p>INSERT INTO users （name，tel） VALUES (‘haoge’,’192xxxxx’)</p><p>删除</p><p>删除所有数据</p><p>DELETE FORM users</p><p>DELETE FROM users  WHERE id &#x3D; 10；</p><p>更新数据</p><p>此处没有指定哪一个数据修改，会将所有数据修改</p><p>UPDATE users SET name &#x3D; ‘zhangsan’，age &#x3D; 22；</p><p>更新符合条件的数据</p><p>UPDATE users SET name &#x3D; ‘zhangsan’，age &#x3D; 22 WHERE id &#x3D; 22；</p><h4 id="DQL语句-数据查询语言"><a href="#DQL语句-数据查询语言" class="headerlink" title="DQL语句 数据查询语言"></a>DQL语句 数据查询语言</h4><p>SELECT 从一个或多个表中国检索选中的行，记录</p><p>查询所有字段</p><p>SELECT * FROM users;</p><p>查询指定字段</p><p>SELECT title，price FROM users;</p><p>取别名</p><p>SELECT title as phonetitle，price FROM users;</p><h5 id="where条件"><a href="#where条件" class="headerlink" title="where条件"></a>where条件</h5><h5 id="逻辑运算语句"><a href="#逻辑运算语句" class="headerlink" title="逻辑运算语句"></a>逻辑运算语句</h5><p>SELECT * FROM users where price &gt; 900 AND&#x2F;&amp;&amp; price &lt; 1000</p><p>SELECT * FROM users where price &gt; 900 OR&#x2F;|| price &lt; 1000</p><p>将某些值设定为NULL</p><p>UPDATE products SET url &#x3D; NULL where id；</p><p>查询某一个值为null</p><p>SELECT * FROM users WHERE url IS NULL</p><p>SELECT * FROM users WHERE url IS NOT NULL</p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><p>搭配LIKE和%与_搭配</p><p>%表示匹配任意个字符串，_表示匹配一个的任意字符</p><p>SELECT * FROM products  WHERE title LIKE ‘%华为%’;只要有华为就可以</p><p> SELECT * FROM products  WHERE title LIKE ‘_华为%’;最前面的一个字符是任意的，后面接着华为</p><h5 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h5><p>表示取多个值中的其中一个即可</p><p> SELECT * FROM products  WHERE brand &#x3D; ‘华为’ || brand &#x3D; ‘小米’</p><p>可是如果条件多的话就brand &#x3D; xxx || brand &#x3D; xxx ||  brand &#x3D; xxx;</p><p> SELECT * FROM products  WHERE brand IN ( ‘华为’ ,’小米’,’苹果’)</p><h5 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h5><p> SELECT * FROM products  WHERE brand IN ( ‘华为’ ,’小米’,’苹果’) ORDER BY price ASC;根据价格升序</p><p> SELECT * FROM products  WHERE brand IN ( ‘华为’ ,’小米’,’苹果’) ORDER BY price ASC ，score DESC;根据价格升序后再对比评分降序</p><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>SELECT * FROM users LIMIT 20 OFFSET 0；</p><p>SELECT * FROM users LIMIT OFFSET LIMIT；</p><p>SELECT * FROM users LIMIT 0 20；</p><h4 id="创建多表"><a href="#创建多表" class="headerlink" title="创建多表"></a>创建多表</h4><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><p>常用的聚合函数</p><p>计算所有商品总价值</p><p>SELECT SUM(price) as totalPrice FROM products </p><p>求所有华为手机价格的总和</p><p>SELECT SUM(price) FROM products WHERE brand &#x3D; ‘华为’，</p><p>计算华为手机平均价格</p><p>SELECT AVG(price) FROM products WHERE brand &#x3D; ‘华为’，</p><p>计算价格最大值</p><p>SELECT MAX(price) FROM products，</p><p>计算价格最小值</p><p>SELECT MIN(price) FROM products，</p><p>求华为手机个数</p><p>SELECT COUNT(*) FROM products brand &#x3D; ‘华为，</p><p>求苹果手机有url的个数</p><p>SELECT COUNT(url) FROM products brand &#x3D; ‘苹果，</p><p>去除相同价格</p><p>SELECT COUNT(DISTINCT price) FROM products，</p><h5 id="GROUP-BY-分组"><a href="#GROUP-BY-分组" class="headerlink" title="GROUP BY 分组"></a>GROUP BY 分组</h5><p>根据品牌进行分组</p><p>SELECT brand, AVG(price),COUNT(*),AVG(score)  FROM products GROUP BY brand；</p><h5 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h5><p>根据查询出来的结果筛选出》2000的手机</p><p>SELECT brand, AVG(price) as toal,COUNT(*),AVG(score)  FROM products GROUP BY brand HAVING total &gt; 2000；</p><p>求评分大于7.5的手机的平均价格</p><p>SELECT AVG(price) FROM products WHERE score &gt; 7.5</p><p>按照品牌分类以后求评分大于7.5的手机的平均价格</p><p>SELECT * FROM products WHERE score &gt; 7.5 GROUP BY brand；44</p><h5 id="创建多张表"><a href="#创建多张表" class="headerlink" title="创建多张表"></a>创建多张表</h5><p>CREATE TABLE IF NOT EXISTS brand（</p><p>​id INT PRIMARY KEY AUTO INCREMENT,</p><p>​name VARCHAR(20) NOT NULL,</p><p>​webSite VARCHAR(100),</p><p>​phoneRank INT</p><p>）</p><p>INSERT INTO brand (name,website,phoneRank) VALUES (‘华为’,’<a href="http://www.baidu.com&/#39;,20">www.baidu.com&#39;,20</a>)</p><p>ALTER TABLE products add brandid INT；通过新增加的brandid去查询另一张表的数据</p><p>但是该brandid必须要限制</p><p>外键限制foreign key</p><p>create table products (</p><p>​foreign key(brandid) reference brand(id) </p><p>)</p><p>修改brandid为外键</p><p>alter table products ADD FOREIGN KEY（brandid） REFERENCES brand(id)</p><p>外键内置两个action，一个是删除时，一个是更新时</p><p>不能随意更改外键及其相关值</p><p>RESTRICT默认属性，当更新或者删除某个值时，会检查该值是否有关联的外键记录，有的话会报错，不允许更新或删除</p><p>CASCADE:关联联动，当更新或者删除每个值时，检查是否有外键记录，如果是更新，那么则更新对应记录如果是删除，则删除对应记录</p><p>SET NULL当更新或者删除值时，会检查是否有该值的外键记录，有的话则设置为NULL</p><p>将RESTRICT修改为CASCADE</p><p>1：获取目前外键名称</p><p>SHOW CREATE TABLE products</p><p>2：根据名称将外键删掉</p><p>ALTER TABLE products DROP FOREIGN KEY products_ibfk_1;</p><p>3：重新添加外键约束</p><p>ALTER TABLE products ADD FOREIGN KEY （brandid）REFERENCES brand(id) </p><p>ON UPDATE CASCADE</p><p>ON DELETE RESTRICT  &#x2F;&#x2F; 删除时是非常危险的，不能直接用cascade，建议使用默认值</p><h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><p>多连接sql join</p><p>左连接 ：LEFT JOIN</p><p>右连接 RIGHT JOIN</p><p>内连接 INNER JOIN</p><p>全连接 FULL OUTER JOIN 注：mysql不支持</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库mysql的学习&quot;&gt;&lt;a href=&quot;#数据库mysql的学习&quot; class=&quot;headerlink&quot; title=&quot;数据库mysql的学习&quot;&gt;&lt;/a&gt;数据库mysql的学习&lt;/h2&gt;&lt;p&gt;SQL语句&lt;/p&gt;
&lt;p&gt;mysql –version 查看数据库版</summary>
      
    
    
    
    <category term="数据库mysql的学习" scheme="https://222cabbage.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93mysql%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="mysql" scheme="https://222cabbage.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>websocket学习</title>
    <link href="https://222cabbage.github.io/2022/06/12/websocket1/"/>
    <id>https://222cabbage.github.io/2022/06/12/websocket1/</id>
    <published>2022-06-12T15:40:18.000Z</published>
    <updated>2022-06-12T15:52:22.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="websocket的学习"><a href="#websocket的学习" class="headerlink" title="websocket的学习"></a>websocket的学习</h2><p>公司自研了一个项目，需要使用到即时通讯，虽然任务最后没有落实到我手上，但是我还是去看了一下下，学会了一些基本的操作</p><p>websocket涉及到一些计算机网络相关的知识，此处省略一万字……</p><p>npm install nodejs-websocket</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// node服务端代码结构</span><br><span class="line">var ws = require(&quot;nodejs-websocket&quot;)</span><br><span class="line">// 创建链接通道数组</span><br><span class="line">const conList = []</span><br><span class="line">var server = ws.createServer(function (conn) &#123;</span><br><span class="line">    console.log(&#x27;conn&#x27;,conn)</span><br><span class="line">    // 将连接通道添加到数组中保存</span><br><span class="line">    conList.push(conn)</span><br><span class="line">    console.log(&quot;创建了一个websocket服务器&quot;,&#x27;有&#x27; + conList.length + &#x27;人连接上了&#x27;)</span><br><span class="line">    conn.on(&quot;text&quot;, function (str) &#123;</span><br><span class="line">        console.log(&quot;服务器接收到的数据是&quot;+str)</span><br><span class="line">        // 循环遍历发送数据</span><br><span class="line">        for(var i = 0 ; i &lt; conList.length; i++)&#123;</span><br><span class="line">            conList[i].sendText(str.toUpperCase()+&quot;!!!&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    conn.on(&quot;close&quot;, function (code, reason) &#123;</span><br><span class="line">        console.log(&quot;websocket服务器关闭&quot;,&#x27;原因是&#x27; + reason)</span><br><span class="line">         // 如果某一个连接关闭 那么需要将其conList中删除</span><br><span class="line">        conList.splice(conList.indexOf(conn),1)</span><br><span class="line">        console.log(&#x27;当前连接数量&#x27; + conList.length)</span><br><span class="line">    &#125;)</span><br><span class="line">    conn.on(&#x27;error&#x27;,function(code,reason)&#123;</span><br><span class="line">        console.log(&#x27;异常事件&#x27;,code,&#x27;原因是&#x27; + reason)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).listen(8001,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;running&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// nodemon app.js在8001端口启动一个websocket的服务</span><br></pre></td></tr></table></figure><p>html结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style lang=&quot;&quot;&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border:  1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;button&gt;发送&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        消息列表：</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const ws = new WebSocket(&#x27;ws://localhost:8001&#x27;)</span><br><span class="line">        const btn = document.querySelector(&#x27;button&#x27;)</span><br><span class="line">        const ipt = document.querySelector(&#x27;input&#x27;)</span><br><span class="line">        const box = document.querySelector(&#x27;ul&#x27;)</span><br><span class="line">        // ws.addEventListener(&#x27;open&#x27;,()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        // &#125;)</span><br><span class="line">        btn.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">            let value = ipt.value</span><br><span class="line">            ws.send(value)</span><br><span class="line">        &#125;)</span><br><span class="line">        ws.addEventListener(&#x27;message&#x27;,(e)=&gt;&#123;</span><br><span class="line">            console.log(&#x27;客户端接收到的消息是&#x27;,e.data)</span><br><span class="line">            let li = document.createElement(&#x27;li&#x27;)</span><br><span class="line">            li.innerText = e.data</span><br><span class="line">            box.appendChild(li)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>一个小的test就完成了…</p><p>后面想弄一个基于uniapp的websocket小程序，或许是五百年以后……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;websocket的学习&quot;&gt;&lt;a href=&quot;#websocket的学习&quot; class=&quot;headerlink&quot; title=&quot;websocket的学习&quot;&gt;&lt;/a&gt;websocket的学习&lt;/h2&gt;&lt;p&gt;公司自研了一个项目，需要使用到即时通讯，虽然任务最后没有落实</summary>
      
    
    
    
    <category term="websocket" scheme="https://222cabbage.github.io/categories/websocket/"/>
    
    
    <category term="websocket" scheme="https://222cabbage.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Express和Koa</title>
    <link href="https://222cabbage.github.io/2022/06/04/Node6/"/>
    <id>https://222cabbage.github.io/2022/06/04/Node6/</id>
    <published>2022-06-03T17:47:14.000Z</published>
    <updated>2022-06-05T16:55:26.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node框架Express和Koa"><a href="#Node框架Express和Koa" class="headerlink" title="Node框架Express和Koa"></a>Node框架Express和Koa</h2><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//安装方式 1 脚手架安装</span><br><span class="line">npm install express-generator -g</span><br><span class="line">expres  demo</span><br><span class="line">npm install</span><br><span class="line">node bin/www</span><br><span class="line">// 默认启动是loaclhost:3000</span><br><span class="line"></span><br><span class="line">// 2自己从0实现</span><br><span class="line"> npm install express</span><br><span class="line">// 引入</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">// 返回app</span><br><span class="line">const app = express()</span><br><span class="line">//监听请求路径</span><br><span class="line">app.get(&#x27;/&#x27;,(req,res,next)=&gt;&#123;</span><br><span class="line">    res.end(&#x27;hello get&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">app.post(&#x27;/&#x27;,(req,res,next)=&gt;&#123;</span><br><span class="line">    res.end(&#x27;hello post&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(5000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;开启&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>express的中间件，中间件就是回调函数，接受req，res，next，next是执行下一个中间件的方法，express本质上是中间件的调用</p><p>express提供了两种方式将中间件应用与程序中，app&#x2F;router.use和app&#x2F;router.methods</p><p>可以是app，也可以是router，methods是指常用的请求方式app.get或者app.post</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">//最普通的中间件</span><br><span class="line">app.use((req,res,next)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;注册了第一个普通中间件&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">只会执行一个中间件</span><br><span class="line">app.use((req,res,next)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;注册了第一个普通中间件&#x27;)</span><br><span class="line">    // 想要让第二个中间件执行得</span><br><span class="line">    next()</span><br><span class="line">    res.end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use((req,res,next)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;注册了第二个普通中间件&#x27;)</span><br><span class="line">    res.end() // 报错 不能在end之后再end</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//path匹配中间件</span><br><span class="line">app.use(path,callback)</span><br><span class="line">app.use(&#x27;/home&#x27;,(req,res,next)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;匹配到了/home&#x27;)</span><br><span class="line">    res.end(&#x27;end&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//path和method匹配中间件</span><br><span class="line">app.get(&#x27;/home&#x27;,(req.res,next)=&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//注册多个中间件</span><br><span class="line">app.get(&#x27;/home&#x27;,(req,res,next)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;,(req,res,next)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;,(req,res,next)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//使用express解析req.body很轻松  解析json</span><br><span class="line">app.use(express.json())</span><br><span class="line"></span><br><span class="line">// true是使用qs解析，false那么就是使用node中的queryString进行解析 解析urlencoded</span><br><span class="line">app.use(express.urlencoded(&#123;extended:true&#125;))</span><br><span class="line"></span><br><span class="line">// 解析formdata</span><br><span class="line">npm install multer</span><br><span class="line">const upload = require(&#x27;multer&#x27;)</span><br><span class="line">app.use(multer.any())</span><br><span class="line">// 上穿文件 设置上传路径</span><br><span class="line">const multer = multer(&#123;</span><br><span class="line">    dest:&#x27;./uploads/&#x27; // 上传文件保存位置,</span><br><span class="line">&#125;)</span><br><span class="line">const path = require(&#x27;path&#x27;</span><br><span class="line">const storage = muliter.diskStorge(&#123;</span><br><span class="line">    destintion: (req,res,cb)=&gt;&#123;</span><br><span class="line">        cb(null,&#x27;./uploads/&#x27;)</span><br><span class="line">    &#125;//目的地，</span><br><span class="line">    filename: (req,res,cb)=&gt;&#123;</span><br><span class="line">        cb(null, Date.now() + path.extname(file.originalname))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">upload.single 上传单个文件 upload.array 上传多个文件 可以传递一个key值表示具体处理哪个数据</span><br><span class="line">app.post(&#x27;/upload&#x27;,upload.single(&#x27;&#x27;) ,(req,res,next)=&gt;&#123;</span><br><span class="line">console.log(req.files)</span><br><span class="line">    res.end(&#x27;上传成功&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 默认没有后缀名</span><br></pre></td></tr></table></figure><h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Node框架Express和Koa&quot;&gt;&lt;a href=&quot;#Node框架Express和Koa&quot; class=&quot;headerlink&quot; title=&quot;Node框架Express和Koa&quot;&gt;&lt;/a&gt;Node框架Express和Koa&lt;/h2&gt;&lt;h3 id=&quot;Expre</summary>
      
    
    
    
    <category term="Node" scheme="https://222cabbage.github.io/categories/Node/"/>
    
    
    <category term="Node学习" scheme="https://222cabbage.github.io/tags/Node%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Buffer和浏览器的事件循环</title>
    <link href="https://222cabbage.github.io/2022/05/30/Node5/"/>
    <id>https://222cabbage.github.io/2022/05/30/Node5/</id>
    <published>2022-05-29T16:00:55.000Z</published>
    <updated>2022-05-31T23:20:24.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Buffer和浏览器的事件循环"><a href="#Buffer和浏览器的事件循环" class="headerlink" title="Buffer和浏览器的事件循环"></a><strong>Buffer和浏览器的事件循环</strong></h2><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><h4 id="buffer与数据的二进制"><a href="#buffer与数据的二进制" class="headerlink" title="buffer与数据的二进制"></a>buffer与数据的二进制</h4><p>计算机中所有内容，文字音频视频都是二进制来表示的</p><p>js很难表示二进制，可以使用node中的buffer，或者库Sharp，对buffer进行处理</p><p>buffer相当于一个存储了二进制的数组，数组中的每一项都可以保存八位二进制：00000000</p><p>八位二进制数字合在一起称作单元，称为一个字节</p><p>1byte &#x3D; 8bit ，1kb &#x3D; 1024byte，1m &#x3D; 1024kb</p><h4 id="buffer和字符串"><a href="#buffer和字符串" class="headerlink" title="buffer和字符串"></a>buffer和字符串</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//创建方式1：以果蛆，不推荐</span><br><span class="line">const buffer = new Buffer(&#x27;cabbage&#x27;) </span><br><span class="line">console.log(buffer) // </span><br><span class="line"></span><br><span class="line">//创建方式2</span><br><span class="line">const buffer = Buffer.from(&#x27;cabbage&#x27;,&#x27;utf-8&#x27;)</span><br><span class="line">console.log(buffer)</span><br><span class="line"></span><br><span class="line">//解码</span><br><span class="line">consoe.log(buffer.toString(&#x27;utf8&#x27;))//解码时需要传递与编码相同的类型</span><br><span class="line"></span><br><span class="line">const buffer = Buffer.alloc(8) // 创建了一个八位</span><br><span class="line">buffer[0] = 88</span><br></pre></td></tr></table></figure><h4 id="buffer和文件操作"><a href="#buffer和文件操作" class="headerlink" title="buffer和文件操作"></a>buffer和文件操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&#x27;./asset/xx.png&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">// data是buffer格式</span><br><span class="line">    fs.writeFile(&#x27;./asset/yyy.png&#x27;,data,(err,data)=&gt;&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件循环和异步IO"><a href="#事件循环和异步IO" class="headerlink" title="事件循环和异步IO"></a>事件循环和异步IO</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>process计算机已经运行的程序</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>thread操作系统能够运行运算调度的最小单位</p><p>每一个进程都会启动一个线程来执行程序的代码，主线程</p><p>进程是线程的容器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Buffer和浏览器的事件循环&quot;&gt;&lt;a href=&quot;#Buffer和浏览器的事件循环&quot; class=&quot;headerlink&quot; title=&quot;Buffer和浏览器的事件循环&quot;&gt;&lt;/a&gt;&lt;strong&gt;Buffer和浏览器的事件循环&lt;/strong&gt;&lt;/h2&gt;&lt;h3 </summary>
      
    
    
    
    <category term="Node" scheme="https://222cabbage.github.io/categories/Node/"/>
    
    
    <category term="Node学习" scheme="https://222cabbage.github.io/tags/Node%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>webpack的学习</title>
    <link href="https://222cabbage.github.io/2022/05/28/webpack1/"/>
    <id>https://222cabbage.github.io/2022/05/28/webpack1/</id>
    <published>2022-05-28T15:18:47.000Z</published>
    <updated>2022-06-12T15:53:48.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack的学习"><a href="#webpack的学习" class="headerlink" title="webpack的学习"></a><strong>webpack的学习</strong></h2><p>虽然以前接触过webpack，但是一开始webpack学习后考虑到当时很菜的我并没有什么运用的地方 </p><p>因此一开始就学习的很草率，什么也没有记住，现在重新再学一次</p><p>想要使用webpacj，首先得安装webpack和webpackcli</p><p>但是不建议安装在全局可以在某个文件夹下单独npm init 建立package.json文件以后再npm安装在该目录下</p><p>npm install webpack -S</p><p>npm install webpack-cli -S</p><p>在src文件下需要新建一个index.js作为js文件的入口</p><p><img src="https://s1.ax1x.com/2022/05/25/XkiJiQ.png"></p><p>被外部的index.html引入</p><p>npm run build &amp;&amp; npx webpack</p><p>会在目录下生成一个dist文件夹，内部包含一个main.js 包含打包后的代码</p><p><img src="https://s1.ax1x.com/2022/05/25/XkiqSA.png"></p><p>webpack内置指令很多，可以通过npx webpack –help查看</p><p><img src="https://s1.ax1x.com/2022/05/25/XkACMn.png"></p><p>自定义文件的打包路径和打包文件名 path需要引入path模块拼接形成绝对路径，否则会报错</p><p><img src="https://s1.ax1x.com/2022/05/25/XkAAaT.png"></p><p>因为打包完后的路径是dist&#x2F;main.js，因此需要修改index.html的js文件路径</p><p><img src="https://s1.ax1x.com/2022/05/25/XkAdsI.png"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>每次手动去index.html修改dist下的路径太麻烦，因此需要插件 </p><p>想要使用插件需要require引入，然后放入plugins中</p><h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><p>npm install -S html-webpack-plugin</p><p><img src="https://s1.ax1x.com/2022/05/25/XkeCfU.png"></p><p>new实例化 在dist文件夹下单独生成一个引入了js文件的html</p><p>如何使用原来的index.html入口</p><p><img src="https://s1.ax1x.com/2022/05/25/XkeX9O.png"></p><p>npx webpack ! 冲啊！</p><h3 id="清理dist"><a href="#清理dist" class="headerlink" title="清理dist"></a>清理dist</h3><p>每次重复生成dist内部文件，需要在每次构建前清除dist文件 再重新生成，需要使用output.clean</p><p><img src="https://s1.ax1x.com/2022/05/25/Xk2C1P.png"></p><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><p>设置mode &#x3D; ‘development’</p><p>设置source map   因为webpack打包源码时很难追踪到错误和警告所处位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry:&#x27;./src/index.js&#x27;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&#x27;haoge.js&#x27;,</span><br><span class="line">        path:path.resolve(__dirname,&#x27;./dist&#x27;),</span><br><span class="line">        clean:true</span><br><span class="line">    &#125;,</span><br><span class="line">    mode:&#x27;development&#x27;,</span><br><span class="line">    devtool:&#x27;inline-source-map&#x27;, //在开发模式下追踪代码</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&#x27;./index.html&#x27;, //打包生成的文件模板</span><br><span class="line">            filename:&#x27;app.html&#x27;, //打包生成的文件名称 默认是index.html</span><br><span class="line">            // 资源文件注入模板的位置</span><br><span class="line">            inject:&#x27;body&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每次都需要重新打包启动浏览器观看 很麻烦 可以使用 watch mode观察模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --watch</span><br></pre></td></tr></table></figure><p>能够自动检测代码变化，不需要重新打包，但是再浏览器中想要查看最新的代码依旧需要刷新</p><p>因此需要使用webpack-dev-server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -S</span><br><span class="line">module.exports = &#123;</span><br><span class="line">     devServer:&#123;</span><br><span class="line">        static:&#x27;./dist&#x27; //将dist下的文件设置为web服务的目录</span><br><span class="line">    &#125;,   </span><br><span class="line">&#125;</span><br><span class="line">npx webpack serve --open</span><br></pre></td></tr></table></figure><h3 id="资源模块"><a href="#资源模块" class="headerlink" title="资源模块"></a>资源模块</h3><p>webpack内置模块asset modules引入其他类型文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">asset/resource 发送一个单独的文件并导出URL</span><br><span class="line">asset/inline 导出一个资源的data URI</span><br><span class="line">asset/source 导出资源源代码</span><br><span class="line">asset 在导出一个data URI 和发送一个单独的文件之间自动选择</span><br></pre></td></tr></table></figure><p>引入资源匹配</p><p><img src="https://s1.ax1x.com/2022/05/27/XmwIOO.png"></p><p><img src="https://s1.ax1x.com/2022/05/27/XmwOfI.png"></p><p>修改src内容引入资源创建dom渲染  </p><p>注：不能再npx webpack serve –open下打开  必须先npx webpack打包后 再npx webpack serve –open启动</p><p>自定义输出文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">    assetModuleFilename:&#x27;image/[contenthash][ext][query]&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/27/XmBuxP.png"></p><p>会将文件导出带dist下的image目录 默认命名为image&#x2F;[contenthash][ext][query]</p><p>也可将某些指定资源打包到特定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rules: [&#123;</span><br><span class="line"> test: /\.png/,</span><br><span class="line"> type: &#x27;asset/resource&#x27;,</span><br><span class="line"> // 优先级高于 assetModuleFilename</span><br><span class="line"> generator: &#123;</span><br><span class="line"> filename: &#x27;images/[contenthash][ext][query]&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h4 id="inline资源行内"><a href="#inline资源行内" class="headerlink" title="inline资源行内"></a>inline资源行内</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    rules[&#123;</span><br><span class="line">        test:/\.svg/,</span><br><span class="line">        type:&#x27;asset/inline&#x27;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会将文件作为URL注入dom的src</p><h4 id="自定义webpack的URL生成器"><a href="#自定义webpack的URL生成器" class="headerlink" title="自定义webpack的URL生成器"></a>自定义webpack的URL生成器</h4><p>webpack自带的inline编译的url是base64，如果想自定义url，可以下载一个自定义函数来编码文件内容</p><p>npm install mini-svg-data-uri -D</p><h4 id="source资源"><a href="#source资源" class="headerlink" title="source资源"></a>source资源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mocule:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:/\.txt/,</span><br><span class="line">        type:&#x27;asset/source&#x27;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">// 遇到一个以前没接触过的写法</span><br><span class="line">dom.style.cssText = `width:100px;height:200px;background:skyblue` // 定义样式</span><br><span class="line">dom.textContent = &#x27;cabbage&#x27; //</span><br><span class="line">//最后生成一个200px宽高，内容是文本cabbage的盒子</span><br></pre></td></tr></table></figure><h4 id="通用资源"><a href="#通用资源" class="headerlink" title="通用资源"></a>通用资源</h4><p>设置type为asset以后，webpack会自动识别，小于8k被视为inline，反之视为resource</p><p>可以在webpack中设置限制的大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          test:/\.jpg/,</span><br><span class="line">          type:&#x27;asset&#x27;,</span><br><span class="line">          parser:&#123;</span><br><span class="line">              dataUrlCondition:&#123;</span><br><span class="line">                  maxSize: 4 * 1024 // 限制4kb</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>l除开资源模块，可以使用loader引入其他类型文件</p><p>webpack只能识别js和json，loader能够让其他类型文件转换为有效模块，供应用程序使用</p><p>loader具有两个属性，test：匹配对应文件，use：定义应该使用哪种loader</p><h4 id="加载CSS"><a href="#加载CSS" class="headerlink" title="加载CSS"></a>加载CSS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//为了import css文件，需要安装style-loader与css-loader</span><br><span class="line">npm install --save-d style-loader css-loader</span><br><span class="line">&#123;</span><br><span class="line">            test:/\.css$/i,</span><br><span class="line">            use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;] //顺序固定，不然可能会抛出错误</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">// 也可以支持less，sass等预处理器</span><br><span class="line">// npm install less less-loader --save-dev</span><br><span class="line">// 匹配less文件</span><br><span class="line">&#123;</span><br><span class="line">            test:/\.less$/i,</span><br><span class="line">            use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">@color:yellow;</span><br><span class="line">.world &#123;</span><br><span class="line">    color: @color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽离和压缩CSS"><a href="#抽离和压缩CSS" class="headerlink" title="抽离和压缩CSS"></a>抽离和压缩CSS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">npm install mini-css-extract-plugin --save-dev</span><br><span class="line">// 该插件会将包含css的js文件创建一个css文件，并支持按需加载和sourcemap，必须要webpack5才能运行</span><br><span class="line">const miniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;)</span><br><span class="line">plugins：[</span><br><span class="line">new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename:&#x27;styles/[contenthash].css&#x27;</span><br><span class="line">     &#125;)</span><br><span class="line">]</span><br><span class="line">&#123;</span><br><span class="line">    test:/\.css$/i,</span><br><span class="line">    use:[miniCssExtractPlugin.loader,&#x27;css-loader&#x27;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">npx webpack //将css文件打包在dist/styles/xxxx.css</span><br><span class="line">打开文件后发现样式代码并没有压缩 需要安装css-minimizer-webpack-plugin</span><br><span class="line">npm install css-minimizer-webpack-plugin --sace-dev</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        minimizer:[</span><br><span class="line">            new CssMinimizerPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"> // 有一个地方不能忽视，需要将mode改为production，否则压缩会失败</span><br></pre></td></tr></table></figure><h4 id="加载images图像"><a href="#加载images图像" class="headerlink" title="加载images图像"></a>加载images图像</h4><p>我们可以借助资源模块将图片混入我们的系统，也可以使用css直接引用文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">backImg &#123;</span><br><span class="line">    background-image: url(&#x27;&#x27;)</span><br><span class="line">    // style.css 我在玩的时候引入的背景图片大小是400多k，会直接遮罩警告，但是可以关闭，所以丝毫不慌</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载font"><a href="#加载font" class="headerlink" title="加载font"></a>加载font</h4><p>使用资源模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test：/\.(woff|woff2|eot|ttf|otf)$/i,</span><br><span class="line">    type:&#x27;asset/resource&#x27;</span><br><span class="line">&#125;</span><br><span class="line">// 引入阿里巴巴字体图标库......</span><br></pre></td></tr></table></figure><h4 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h4><p>webpack还可以加载xml，json，csv，tsv等文件，需要使用csv-loader和xml-loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev csv-loader xml-loader</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  test:/\.(csv|tsv)$/i,</span><br><span class="line">  use:[&#x27;csv-loader&#x27;]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  test:/\.xml$/i,</span><br><span class="line">  use:[&#x27;xml-loader&#x27;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// csv会被转化成数组 xml会被转化为对象</span><br></pre></td></tr></table></figure><h4 id="自定义JSON模块parser"><a href="#自定义JSON模块parser" class="headerlink" title="自定义JSON模块parser"></a>自定义JSON模块parser</h4><p>通过自定义parser替代特定的webpack loader，可以将任何toml，yaml，或者json5作为JSON文件导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">npm install toml yamljs json5 --save-dev</span><br><span class="line">在webpack.config.js中配置</span><br><span class="line">const toml = require(&#x27;toml&#x27;)</span><br><span class="line">const yaml = require(&#x27;yamljs&#x27;)</span><br><span class="line">const json5 = require(&#x27;json5&#x27;)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    test: /\.toml$/i,</span><br><span class="line">    type: &#x27;json&#x27;,</span><br><span class="line">    parser: &#123;</span><br><span class="line">    parse: toml.parse,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    test: /\.yaml$/i,</span><br><span class="line">    type: &#x27;json&#x27;,</span><br><span class="line">    parser: &#123;</span><br><span class="line">    parse: yaml.parse,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    test: /\.json5$/i,</span><br><span class="line">    type: &#x27;json&#x27;,</span><br><span class="line">    parser: &#123;</span><br><span class="line">    parse: json5.parse,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><p>js文件需要编译吗？</p><p>webpack可以加载打包js文件，但是无法对js文件做出转换，会保持原样输出，可以使用babel-loader将es6转换成es5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env</span><br><span class="line">babel-loader : 在webpack里应用 babel 解析ES6的桥梁</span><br><span class="line">@babel/core : babel核心模块</span><br><span class="line">@babel/preset-env : babel预设，一组 babel 插件的集</span><br><span class="line">&#123;</span><br><span class="line">   test: /\.js$/,</span><br><span class="line">   exclude: /node_modules/,</span><br><span class="line">   use: &#123;</span><br><span class="line">    loader: &#x27;babel-loader&#x27;,</span><br><span class="line">    options: &#123;</span><br><span class="line">     presets: [&#x27;@babel/preset-env&#x27;]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">// npx webpack</span><br><span class="line">// 按照文档来说应该会报regeneratorRuntime is not defined 但是我没报 挺神奇的</span><br><span class="line">// 如果报错了那么就是babel未配置正确</span><br><span class="line"># 这个包中包含了regeneratorRuntime，运行时需要</span><br><span class="line">npm install --save @babel/runtime</span><br><span class="line"># 这个插件会在需要regeneratorRuntime的地方自动require导包，编译时需要</span><br><span class="line">npm install --save-dev @babel/plugin-transform-runtime</span><br><span class="line"># 更多参考这里</span><br><span class="line">https://babeljs.io/docs/en/babel-plugin-transform-runtime</span><br><span class="line">// 接着修改一下webpack.config.js的配置</span><br><span class="line">&#123;</span><br><span class="line">   test: /\.js$/,</span><br><span class="line">   exclude: /node_modules/,</span><br><span class="line">   use: &#123;</span><br><span class="line">    loader: &#x27;babel-loader&#x27;,</span><br><span class="line">    options: &#123;</span><br><span class="line">     presets: [&#x27;@babel/preset-env&#x27;],</span><br><span class="line">     plugins: [</span><br><span class="line">     [</span><br><span class="line">       &#x27;@babel/plugin-transform-runtime&#x27;</span><br><span class="line">     ]</span><br><span class="line">    ]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h3><p>代码分离是webpack的特性，可以将不同的代码分离到不同的bundle，可以影响加载时间</p><p>常用的代码分离方法：</p><p>1：入口起点，手动配置entry分离代码</p><p>2：防止重复，使用Entry dependencies 或者 SplitChunksPlugin 去重和分离chunk</p><p>3：动态导入，通过模块的内联函数调用来分离代码</p><h4 id="1：入口起点"><a href="#1：入口起点" class="headerlink" title="1：入口起点"></a>1：入口起点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 修改配置文件</span><br><span class="line">entry:&#123;</span><br><span class="line">       index:&#x27;./src/index.js&#x27;,</span><br><span class="line">       another:&#x27;./src/another-module.js&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   output:&#123;</span><br><span class="line">       filename:&#x27;[name].bundle.js&#x27;,</span><br><span class="line">       path:path.resolve(__dirname,&#x27;./dist&#x27;),</span><br><span class="line">       clean:true,</span><br><span class="line">       assetModuleFilename:&#x27;images/[contenthash][ext][query]&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   // 在 another-bundle.js 和 index.js 中如果都引用了lodash 那么打包的体积就会增大 造成重复问题</span><br></pre></td></tr></table></figure><h4 id="2：防止重复"><a href="#2：防止重复" class="headerlink" title="2：防止重复"></a>2：防止重复</h4><p>配置dependOn，可以在多个chunk共享模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 设置lodash为共享模块 会在dist下生成shared.bundle.js</span><br><span class="line">entry:&#123;</span><br><span class="line">    index:&#123;</span><br><span class="line">        import:&#x27;./src/index.js&#x27;,</span><br><span class="line">        dependOn:&#x27;shared&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    another:&#123;</span><br><span class="line">        import:&#x27;./src/another-module.js&#x27;,</span><br><span class="line">        dependOn:&#x27;shared&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    shared: &#x27;lodash&#x27;,</span><br><span class="line">    // index:&#x27;./src/index.js&#x27;,</span><br><span class="line">    // another:&#x27;./src/another-module.js&#x27;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 但是这种方式需要手动配置共享文件 可以利用SplitChunksPlugin插件将公共依赖模块提取到已有或者是新生成的chunk</span><br></pre></td></tr></table></figure><h4 id="3：动态导入"><a href="#3：动态导入" class="headerlink" title="3：动态导入"></a>3：动态导入</h4><p>当涉及到动态拆分代码时，需要使用es的import或者webpack的遗留功能require.ensure</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 1:import</span><br><span class="line">import &#x27;./async-module&#x27; // 内部包含js代码</span><br><span class="line">// 2:require.ensure</span><br></pre></td></tr></table></figure><h4 id="4：懒加载"><a href="#4：懒加载" class="headerlink" title="4：懒加载"></a>4：懒加载</h4><p>在一开始不加载，在完成了某些操作之后再加载，优化响应速度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const btn = document.createElement(&#x27;button&#x27;)</span><br><span class="line">btn.textContent = &#x27;点击执行加法&#x27;</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">    import(/* webpackChunkName: &#x27;math&#x27; */ &#x27;./math.js&#x27;).then((&#123;add&#125;)=&gt;&#123;</span><br><span class="line">        console.log(add(10,30))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">// webpack 魔法注释： webpackChunkName: &#x27;math&#x27; ,告诉webpack打包生成的文件名为 math</span><br><span class="line">// npx webpack打包完以后，在浏览器点击这个按钮才会引入并运行math.bundle.js</span><br></pre></td></tr></table></figure><h4 id="5：预获取-x2F-预加载模块"><a href="#5：预获取-x2F-预加载模块" class="headerlink" title="5：预获取&#x2F;预加载模块"></a>5：预获取&#x2F;预加载模块</h4><p>webpack4.6增加了对预获取和预加载的支持</p><p>使用prefetch和preload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// prefetch 添加该魔法注释以后 浏览器回在闲置时间自动下载该math.js文件</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">    import(/* webpackChunkName: &#x27;math&#x27;, webpackPrefetch: true */ &#x27;./math.js&#x27;).then((&#123;add&#125;)=&gt;&#123;</span><br><span class="line">        console.log(add(10,30))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">// preload</span><br><span class="line">preload是当下时刻，prefetch是未来的时刻</span><br><span class="line">preload立即下载，prefetch是闲置时下载</span><br><span class="line">preload加载方式是并行的，prefetch是主chunk结束后执行</span><br><span class="line">import(/* webpackChunkName: &#x27;print&#x27;, webpackPreload: true */ &#x27;./print.js&#x27;).then((&#123;print&#125;)=&gt;&#123;</span><br><span class="line">print()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; prefetch 闲置加载</p><p><img src="https://s1.ax1x.com/2022/05/31/X8nkZ9.png"></p><p>&#x2F;&#x2F; preload 并行加载 是和index.bundle.js一起加载的</p><p><img src="https://s1.ax1x.com/2022/05/31/X8KpB4.png"></p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="输出文件文件名"><a href="#输出文件文件名" class="headerlink" title="输出文件文件名"></a>输出文件文件名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 可以通过修改替换outpur中的filename的substitutions设置，定义输出名称</span><br><span class="line">// webpack提供了一个substitution(可替换模板字符串的方式)</span><br><span class="line">// 通过括号字符串来模板化文件名，[contenthash] ，substitution会根据资源内容创建出唯一hash，当资源内容变化时，[conetenthash]会自动发生变化</span><br><span class="line">output:&#123;</span><br><span class="line">        filename:&#x27;[name].[contenthash].js&#x27;,</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/31/X8MwLD.png"></p><h4 id="缓存第三方库"><a href="#缓存第三方库" class="headerlink" title="缓存第三方库"></a>缓存第三方库</h4><p>在webpack中比较推荐将lodash等第三方库提取到一个单独的chunk中，利用client的长效缓存机制，减少不做修改的文件的请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 在optimization.splitChunks 添加如下 cacheGroups 参数并构建</span><br><span class="line">optimization:&#123;</span><br><span class="line">        // minimizer:[</span><br><span class="line">        //     new CssMinimizerPlugin()</span><br><span class="line">        // ],</span><br><span class="line">        splitChunks:&#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    test: /[\\/]node_modules[\\/]/,</span><br><span class="line">                    name: &#x27;vendors&#x27;,</span><br><span class="line">                    chunks: &#x27;all&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/31/X8QQpt.png"></p><h4 id="将js文件放置到一个文件夹中"><a href="#将js文件放置到一个文件夹中" class="headerlink" title="将js文件放置到一个文件夹中"></a>将js文件放置到一个文件夹中</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">filename: &#x27;scripts/[name].[contenthash].js&#x27;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/31/X8QBcV.png"></p><h3 id="拆分开发环境和生产环境配置"><a href="#拆分开发环境和生产环境配置" class="headerlink" title="拆分开发环境和生产环境配置"></a>拆分开发环境和生产环境配置</h3><p>目前只能手动调整mode切换开发环境和生产环境，考虑到很多配置在开发与生产环境不一样，因此需要区分开发和生产环境以便更灵活的打包</p><h4 id="公共路径"><a href="#公共路径" class="headerlink" title="公共路径"></a>公共路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 在IE情况下// publicPath 可以用来指定应用程序中所有资源的基础路径</span><br><span class="line">// 基于环境配置，如果在开发环境将assets目录下的文件夹托管至CDN，那么如何使用</span><br><span class="line">// environment variable(环境变量)</span><br><span class="line">// webpack.config.js中</span><br><span class="line">import &#123; webpack &#125; from &#x27;webpack&#x27;</span><br><span class="line">const ASSET_PATH = process.env.ASSET_PATH || &#x27;/&#x27;</span><br><span class="line">output:&#123;</span><br><span class="line">        filename:&#x27;scripts/[name].[contenthash].js&#x27;,</span><br><span class="line">        publicPath:ASSET_PATH</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  // 这可以帮助我们在代码中安全地使用环境变量</span><br><span class="line">  new webpack.DefinePlugin(&#123;</span><br><span class="line">   &#x27;process.env.ASSET_PATH&#x27;: JSON.stringify(ASSET_PATH),</span><br><span class="line"> &#125;),</span><br><span class="line">],</span><br><span class="line">// Automatic publicPath</span><br><span class="line">webpack 会自动根据import.meta.url 、 document.currentScript 、 script.src 或者self.location 变量设置 publicPath。我们所需要做的是将 output.publicPath设为 &#x27;auto&#x27;</span><br><span class="line">// 在IE情况下，不支持document.currentScript，这时需要引入polyfill，例如currnetScript Polifill</span><br></pre></td></tr></table></figure><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>想要消除webpack.config.js在开发环境和生产环境之间的差异，需要环境变量environment variable</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// npx webpack --env goal=local --env production --progress</span><br><span class="line">// 可以通过该方式给webpack配置环境变量</span><br><span class="line">// 通常module.exports 指向一个对象，想要使用env变量，那么就需要将module.exports转换成一个函数</span><br><span class="line">module.exports = () =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    ......</span><br><span class="line">        mode:env.production ? &#x27;production&#x27; : &#x27;development&#x27;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拆分配置文件"><a href="#拆分配置文件" class="headerlink" title="拆分配置文件"></a>拆分配置文件</h4><p>目前不管是开发环境还是生产环境，使用的都是同一个配置文件，我们需要创建新的文件区分</p><p>webpack.config.dev.js</p><p>webpack.config.prod.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// ...文件忽略 在生产环境可以配置如下信息，隐藏webpack性能提示信息</span><br><span class="line">performance: &#123;</span><br><span class="line">        hints:false</span><br><span class="line">&#125;,</span><br><span class="line">npx webpack serve -c ./config/webpack.config.dev.js // 执行开发环境配置</span><br><span class="line">npx webpack serve -c ./config/webpack.config.prod.js // 执行生产环境配置</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/31/X8Y9bV.png"></p><h4 id="npm脚本"><a href="#npm脚本" class="headerlink" title="npm脚本"></a>npm脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 每次打包时都要npx xxxxxx</span><br><span class="line">// 在package.json中配置命令</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack serve -c ./config/webpack.config.dev.js&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack -c ./config/webpack.config.prod.js&quot;</span><br><span class="line">&#125;</span><br><span class="line">// npm run build 完美！</span><br></pre></td></tr></table></figure><h4 id="提取公共配置"><a href="#提取公共配置" class="headerlink" title="提取公共配置"></a>提取公共配置</h4><p>在webpack.config.dev.js 和 webpack.config.prod.js 中存在大量相同配置webpack.config.common.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 新建webpack.config.common.js 抽取dev和prod中相同的部分</span><br><span class="line">......此处省略一万字</span><br><span class="line">//改写webpack.config.dev.js</span><br><span class="line">......此处省略一万字</span><br><span class="line">//改写webpack.config.prod.js</span><br><span class="line">......此处省略一万字</span><br></pre></td></tr></table></figure><h4 id="合并配置文件"><a href="#合并配置文件" class="headerlink" title="合并配置文件"></a>合并配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 在代码拆分完毕后 如何保证合并没有问题呢？利用webpack-merge</span><br><span class="line">// npm install webpack-merge</span><br><span class="line">// 创建webpack.config.js</span><br><span class="line">const &#123; merge &#125; = require(&#x27;webpack-merge&#x27;)</span><br><span class="line">const commonConfig = require(&#x27;./webpack.config.common.js&#x27;)</span><br><span class="line">const productionConfig = require(&#x27;./webpack.config.prod.js&#x27;)</span><br><span class="line">const developmentConfig = require(&#x27;./webpack.config.dev&#x27;)</span><br><span class="line">module.exports = (env) =&gt; &#123;</span><br><span class="line">    switch(true) &#123;</span><br><span class="line">    case env.development:</span><br><span class="line">    return merge(commonConfig, developmentConfig)</span><br><span class="line">    case env.production:</span><br><span class="line">    return merge(commonConfig, productionConfig)</span><br><span class="line">    default:</span><br><span class="line">    throw new Error(&#x27;No matching configuration was found!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内卷无出路，躺平才是真……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack的学习&quot;&gt;&lt;a href=&quot;#webpack的学习&quot; class=&quot;headerlink&quot; title=&quot;webpack的学习&quot;&gt;&lt;/a&gt;&lt;strong&gt;webpack的学习&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;虽然以前接触过webpack，但是一开始w</summary>
      
    
    
    
    <category term="Webpack" scheme="https://222cabbage.github.io/categories/Webpack/"/>
    
    
    <category term="Webpack学习" scheme="https://222cabbage.github.io/tags/Webpack%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>实现自己的脚手架</title>
    <link href="https://222cabbage.github.io/2022/05/28/Node4/"/>
    <id>https://222cabbage.github.io/2022/05/28/Node4/</id>
    <published>2022-05-28T15:15:09.000Z</published>
    <updated>2022-05-29T15:59:52.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现自己的脚手架"><a href="#实现自己的脚手架" class="headerlink" title="实现自己的脚手架"></a><strong>实现自己的脚手架</strong></h2><p>! &#x2F;&#x2F; sha-bang指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node  固定写法</span><br><span class="line">console.log(&#x27;cabbage&#x27;)</span><br><span class="line">终端执行npm link 将package下的bin配置的指令与环境变量匹配做链接</span><br><span class="line"></span><br><span class="line">使用第三方库快速构建命令commander</span><br><span class="line">npm install commander</span><br><span class="line">const program = require(&#x27;commander&#x27;)</span><br><span class="line">program.version(require(&#x27;./package.json&#x27;).version) // 动态获取版本号</span><br><span class="line">program.option(&#x27;-c --cabbage&#x27;,&#x27;a cabbage cli，菜的脚手架&#x27;) //设置help指令</span><br><span class="line">cabbage --version</span><br><span class="line">cabbage --help</span><br><span class="line">program.on(&#x27;--help&#x27;,()=&gt;&#123;</span><br><span class="line">    //监听命令</span><br><span class="line">    console.log(&#x27;使用了--help&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cabbage create demo</span><br><span class="line">配置命令后</span><br><span class="line">需要执行git clone ，npm install，npm run serve</span><br><span class="line">如何让git clone？ 需要第三方库的支持</span><br><span class="line">npm install download-git-repo</span><br><span class="line">......</span><br><span class="line">中间省略一万字 字儿太难打了</span><br><span class="line">新知识：EJS模板，新建组件，页面，路由文件，vuex文件都需要一个模板</span><br><span class="line"></span><br><span class="line">最后实现了一个脚手架，但是存在一些问题，似乎是包的版本太老了......等以后再弄一个完整版的脚手架吧，现在的顶多算bug版的脚手架</span><br><span class="line">发布到npm上了，如果感兴趣可以看看，但是不建议下载，有点小问题影响使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现自己的脚手架&quot;&gt;&lt;a href=&quot;#实现自己的脚手架&quot; class=&quot;headerlink&quot; title=&quot;实现自己的脚手架&quot;&gt;&lt;/a&gt;&lt;strong&gt;实现自己的脚手架&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;! &amp;#x2F;&amp;#x2F; sha-bang指令&lt;/p&gt;</summary>
      
    
    
    
    <category term="Node" scheme="https://222cabbage.github.io/categories/Node/"/>
    
    
    <category term="Node学习" scheme="https://222cabbage.github.io/tags/Node%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>包管理工具</title>
    <link href="https://222cabbage.github.io/2022/05/23/Node3/"/>
    <id>https://222cabbage.github.io/2022/05/23/Node3/</id>
    <published>2022-05-23T05:34:13.000Z</published>
    <updated>2022-05-28T15:13:47.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a><strong>包管理工具</strong></h2><p>如何将自己封装好的模块化的工具分享给其他人？</p><p>github？手动下载引入</p><p>npm？yyds</p><p>npm init 一直回车 或者 npm init -y</p><p>npm Install  packagename –save-d</p><p>npm install packagename -S   &#x2F;   -D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// console.log(process)</span><br><span class="line">// const path = require(&#x27;path&#x27;)</span><br><span class="line">// console.log(__dirname)</span><br><span class="line">// path.resolve(__dirname,&#x27;./a.txt&#x27;)</span><br><span class="line">// npm install 原理 </span><br><span class="line">// 帮助我们执行了什么操作</span><br><span class="line">// npm 从5开始支持缓存策略 因为yarn的压力</span><br><span class="line">// 判断有无package.lock 检测依赖关系 查找缓存 构建依赖关系 压缩到nodemodules 如果没有缓存则去官网仓库下载到本地建立缓存</span><br><span class="line">// npm config get cache 获取缓存路径</span><br><span class="line">// 卸载包 npm uninstall packagename --save-dev</span><br><span class="line">// 强制重新build npm rebuild</span><br><span class="line">// 清除缓存 npm cache clean</span><br><span class="line"></span><br><span class="line">// yarn 解决早期npm下载慢 依赖等问题</span><br><span class="line">// yarn add / remove</span><br><span class="line">// cnpm 淘宝镜像china npm</span><br><span class="line">// npm install cnpm -g --register=&quot;&quot;  </span><br><span class="line">// 查看当前npm镜像</span><br><span class="line">// npm config get registry</span><br><span class="line">// npm config set registry 地址</span><br><span class="line"></span><br><span class="line">// npx npm5.2之后自带的一个命令</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;包管理工具&quot;&gt;&lt;a href=&quot;#包管理工具&quot; class=&quot;headerlink&quot; title=&quot;包管理工具&quot;&gt;&lt;/a&gt;&lt;strong&gt;包管理工具&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;如何将自己封装好的模块化的工具分享给其他人？&lt;/p&gt;
&lt;p&gt;github？手动下载</summary>
      
    
    
    
    <category term="Node" scheme="https://222cabbage.github.io/categories/Node/"/>
    
    
    <category term="Node学习" scheme="https://222cabbage.github.io/tags/Node%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于uniapp和uview1.0的简易表单生成器</title>
    <link href="https://222cabbage.github.io/2022/05/18/Component1/"/>
    <id>https://222cabbage.github.io/2022/05/18/Component1/</id>
    <published>2022-05-17T16:51:43.000Z</published>
    <updated>2022-05-17T16:55:24.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于uniapp和uview1-0的简易表单生成器"><a href="#基于uniapp和uview1-0的简易表单生成器" class="headerlink" title="基于uniapp和uview1.0的简易表单生成器"></a><strong>基于uniapp和uview1.0的简易表单生成器</strong></h2><p>在新的项目中，有的表单项相同，那么能不能将表单form-item循环生成出来？只需要传递配置项与规则即可自动生成</p><p>说干就干</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">​```</span><br><span class="line">//表单Form.vue封装  基于uview1.0的input输入框 可以传递类型为text，textarea或者select下拉框</span><br><span class="line">//其他类型需要使用插槽或者其他方式插入 可以绑定form数据</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;&quot;&gt;</span><br><span class="line">&lt;view class=&quot;formbox&quot;&gt;</span><br><span class="line">&lt;u-form :model=&quot;form&quot; ref=&quot;uForm&quot; label-width=&quot;150rpx&quot;&gt;</span><br><span class="line">&lt;u-form-item</span><br><span class="line">v-for=&quot;(item,index) in formItems&quot; </span><br><span class="line">:key=&quot;index&quot;</span><br><span class="line">:label=&quot;item.labelName&quot; </span><br><span class="line">:prop=&quot;item.prop&quot;</span><br><span class="line">:border-bottom=&quot;item.borderBottom&quot;</span><br><span class="line">:label-width=&quot;item.labelWidth&quot;</span><br><span class="line">:style=&quot;&#123;&#x27;position&#x27; : item.prop === &#x27;des&#x27; ? &#x27;relative&#x27; : &#x27;&#x27; &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;u-input</span><br><span class="line">v-if=&quot;item.showInput&quot;</span><br><span class="line">v-model=&quot;form[item.prop]&quot; </span><br><span class="line">:placeholder=&quot;item.placeholder&quot; </span><br><span class="line">:type=&quot;item.type&quot; </span><br><span class="line">:border=&quot;item.border&quot;</span><br><span class="line">:height=&quot;item.height&quot;</span><br><span class="line">:class=&quot;item.class&quot;</span><br><span class="line">:maxlength=&quot;item.maxlength&quot;</span><br><span class="line">:custom-style=&quot;item.inputStyle ? item.inputStyle : null&quot;</span><br><span class="line">:clearable=&quot;false&quot;</span><br><span class="line">@click=&quot;clickChange(item)&quot;/&gt;</span><br><span class="line">&lt;view v-if=&quot;item.prop === &#x27;fileList&#x27;&quot; class=&quot;filebox&quot;&gt;</span><br><span class="line">&lt;view class=&quot;title&quot;&gt;</span><br><span class="line">请上传附件（&#123;&#123; fileLength &#125;&#125;/5）</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;&quot;&gt;</span><br><span class="line">&lt;u-upload</span><br><span class="line">ref=&quot;uUpload&quot; </span><br><span class="line">:action=&quot;action&quot; </span><br><span class="line">:auto-upload=&quot;false&quot;</span><br><span class="line">max-count=&quot;5&quot;</span><br><span class="line">@on-list-change=&quot;imgChange&quot;</span><br><span class="line">&gt;&lt;/u-upload&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;uploadtip&quot;&gt;</span><br><span class="line">&lt;u-icon </span><br><span class="line">name=&quot;info-circle&quot; </span><br><span class="line">color=&quot;#F7B500&quot; </span><br><span class="line">size=&quot;26&quot;</span><br><span class="line">style=&quot;margin-right: 12rpx;&quot;</span><br><span class="line">&gt;&lt;/u-icon&gt;</span><br><span class="line">附件支持图片和视频,支持jpg/png/mp4格式</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;countbox&quot; v-if=&quot;item.prop === &#x27;des&#x27;&quot;&gt;</span><br><span class="line">&#123;&#123; form.des.length ? form.des.length : 0 &#125;&#125;/300</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/u-form-item&gt;</span><br><span class="line">&lt;/u-form&gt;</span><br><span class="line">&lt;u-picker </span><br><span class="line">mode=&quot;time&quot; </span><br><span class="line">:params=&quot;params&quot; </span><br><span class="line">v-model=&quot;showList[&#x27;timeshow&#x27;]&quot;  </span><br><span class="line">@confirm=&quot;timechange&quot; </span><br><span class="line">@cancel=&quot;timecancel&quot;&gt;&lt;/u-picker&gt;</span><br><span class="line">&lt;view v-if=&quot;methodsList.length&quot;&gt;</span><br><span class="line">&lt;u-action-sheet</span><br><span class="line">v-for=&quot;(item,index) in methodsList&quot;</span><br><span class="line">:key=&quot;index&quot;</span><br><span class="line">:list=&quot;paramsData[item.propList]&quot;</span><br><span class="line">v-model=&quot;showList[item.prop + &#x27;show&#x27;]&quot;</span><br><span class="line">@click=&quot;selectchange&quot;</span><br><span class="line">&gt;&lt;/u-action-sheet&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props:&#123;</span><br><span class="line">// 传递的下拉框数据</span><br><span class="line">paramsData:&#123;</span><br><span class="line">type:Object,</span><br><span class="line">default:()=&gt;(&#123;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">rules:&#123;</span><br><span class="line">type:Object,</span><br><span class="line">default:()=&gt;(&#123;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">formItems:&#123;</span><br><span class="line">type:Array,</span><br><span class="line">default:()=&gt;([])</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">// 数据绑定</span><br><span class="line">form:&#123;&#125;,</span><br><span class="line">// 控制显示</span><br><span class="line">showList:&#123;&#125;,</span><br><span class="line">params: &#123;</span><br><span class="line">year: true,</span><br><span class="line">month: true,</span><br><span class="line">day: true,</span><br><span class="line">hour: true,</span><br><span class="line">minute: true,</span><br><span class="line">second: false</span><br><span class="line">&#125;,</span><br><span class="line">// 非真实地址</span><br><span class="line">action: &#x27;http://www.example.com/upload&#x27;,</span><br><span class="line">fileLength:0,</span><br><span class="line">methodsList:[],</span><br><span class="line">selectList:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;&#125;,</span><br><span class="line">onReady() &#123;</span><br><span class="line">this.formItems.forEach((items)=&gt;&#123;</span><br><span class="line">this.$set(this.form,items.prop,&#x27;&#x27;)</span><br><span class="line">this.$set(this.showList,items.prop + &#x27;show&#x27; ,false)</span><br><span class="line">this.form.fileList = []</span><br><span class="line">if(items.type === &#x27;select&#x27;)&#123;</span><br><span class="line">if(items.prop === &#x27;time&#x27;) return</span><br><span class="line">const dataStr = items.prop + &#x27;List&#x27;</span><br><span class="line">const fnStr = items.prop + &#x27;change&#x27;</span><br><span class="line">this.methodsList.push(&#123;</span><br><span class="line">prop:items.prop,</span><br><span class="line">propList:dataStr</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">this.$refs.uForm.setRules(this.rules);</span><br><span class="line">&#125;,500)</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">clickChange(item)&#123;</span><br><span class="line">this.selectList = &#123;</span><br><span class="line">prop:item.prop,</span><br><span class="line">formName:item.prop + &#x27;List&#x27;</span><br><span class="line">&#125;</span><br><span class="line">this.showList[item.prop + &#x27;show&#x27;] = true</span><br><span class="line">&#125;,</span><br><span class="line">selectchange(index)&#123;</span><br><span class="line">if(this.selectList)&#123;</span><br><span class="line">this.form[this.selectList.prop] = this.paramsData[this.selectList.formName][index].text;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">timechange(obj)&#123;</span><br><span class="line">let timestr = Object.values(obj).join(&#x27;-&#x27;)</span><br><span class="line">this.form.time = timestr</span><br><span class="line">&#125;,</span><br><span class="line">timecancel()&#123;</span><br><span class="line">this.show2 = false</span><br><span class="line">&#125;,</span><br><span class="line">// 上传图片变化</span><br><span class="line">imgChange(lists,name)&#123;</span><br><span class="line">this.fileLength = lists.length</span><br><span class="line">this.form.fileList = lists</span><br><span class="line">&#125;,</span><br><span class="line">validateForm()&#123;</span><br><span class="line">let flag</span><br><span class="line">this.$refs.uForm.validate(valid =&gt; &#123;</span><br><span class="line">if (valid) &#123;</span><br><span class="line">// 上传文件</span><br><span class="line">// his.$refs.uUpload[0].upload()</span><br><span class="line">flag = true</span><br><span class="line">&#125; else &#123;</span><br><span class="line">flag = false</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">return flag</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">@import &#x27;./index.scss&#x27;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">//传入配置项  验证规则</span><br><span class="line">export const rules =  &#123;</span><br><span class="line">content: [</span><br><span class="line">&#123; </span><br><span class="line">required: true, </span><br><span class="line">message: &#x27;&#x27;,</span><br><span class="line">trigger: [&#x27;blur&#x27;,&#x27;change&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">......</span><br><span class="line">fileList:[</span><br><span class="line">&#123;</span><br><span class="line">type:&#x27;array&#x27;,</span><br><span class="line">required: true, </span><br><span class="line">message: &#x27;&#x27;,</span><br><span class="line">trigger: [&#x27;blur&#x27;, &#x27;change&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//表单配置</span><br><span class="line">export const formItems = [</span><br><span class="line">......</span><br><span class="line">&#123;</span><br><span class="line">labelName:&#x27; &#x27;,</span><br><span class="line">labelWidth:&#x27;0&#x27;,</span><br><span class="line">type:&#x27;textarea&#x27;,</span><br><span class="line">prop:&#x27;content&#x27;,</span><br><span class="line">placeholder:&#x27;默认文字&#x27;,</span><br><span class="line">height:&#x27;420&#x27;,</span><br><span class="line">class:&#x27;desbox&#x27;,</span><br><span class="line">border:false,</span><br><span class="line">borderBottom:false,</span><br><span class="line">maxlength:&#x27;300&#x27;,</span><br><span class="line">showInput:true,</span><br><span class="line">inputStyle:&#123;</span><br><span class="line">&#x27;background&#x27;: &#x27;#F5F5F5&#x27;,</span><br><span class="line">&#x27;border-radius&#x27;:&#x27;8px&#x27;,</span><br><span class="line">&#x27;padding&#x27;:&#x27;22rpx 26rpx&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于uniapp和uview1-0的简易表单生成器&quot;&gt;&lt;a href=&quot;#基于uniapp和uview1-0的简易表单生成器&quot; class=&quot;headerlink&quot; title=&quot;基于uniapp和uview1.0的简易表单生成器&quot;&gt;&lt;/a&gt;&lt;strong&gt;基于u</summary>
      
    
    
    
    <category term="组件封装" scheme="https://222cabbage.github.io/categories/%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    
    
    <category term="组件封装" scheme="https://222cabbage.github.io/tags/%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>JS运算方法-解决小数点运算精度问题</title>
    <link href="https://222cabbage.github.io/2022/05/18/tips1/"/>
    <id>https://222cabbage.github.io/2022/05/18/tips1/</id>
    <published>2022-05-17T16:39:07.000Z</published>
    <updated>2022-05-17T16:51:21.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决小数点精度问题的JS方法"><a href="#解决小数点精度问题的JS方法" class="headerlink" title="解决小数点精度问题的JS方法"></a><strong>解决小数点精度问题的JS方法</strong></h2><p>一开始学JS的时候也遇到过小数点精度运算的问题，但是没怎么注意，后来在实习时公司的一个项目需要做到金额的运算</p><p>有的金额涉及到了小数点 后运算出的结果会带有很多位小数点 因此就有了这个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">解决小数点计算精度问题</span><br><span class="line">/** * method **</span><br><span class="line"> *  add / subtract / multiply /divide</span><br><span class="line"> * floatObj.add(0.1, 0.2) &gt;&gt; 0.3</span><br><span class="line"> * floatObj.multiply(19.9, 100) &gt;&gt; 1990</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">export const floatObj = function() &#123;</span><br><span class="line">  /*</span><br><span class="line">     * 判断obj是否为一个整数</span><br><span class="line">     */</span><br><span class="line">  function isInteger(obj) &#123;</span><br><span class="line">    return Math.floor(obj) === obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">     * 将一个浮点数转成整数，返回整数和倍数。如 3.14 &gt;&gt; 314，倍数是 100</span><br><span class="line">     * @param floatNum &#123;number&#125; 小数</span><br><span class="line">     * @return &#123;object&#125;</span><br><span class="line">     *   &#123;times:100, num: 314&#125;</span><br><span class="line">     */</span><br><span class="line">  function toInteger(floatNum) &#123;</span><br><span class="line">    var ret = &#123; times: 1, num: 0 &#125;</span><br><span class="line">    if (isInteger(floatNum)) &#123;</span><br><span class="line">      ret.num = floatNum</span><br><span class="line">      return ret</span><br><span class="line">    &#125;</span><br><span class="line">    var strfi = floatNum + &#x27;&#x27;</span><br><span class="line">    var dotPos = strfi.indexOf(&#x27;.&#x27;)</span><br><span class="line">    var len = strfi.substr(dotPos + 1).length</span><br><span class="line">    var times = Math.pow(10, len)</span><br><span class="line">    var intNum = Number(floatNum.toString().replace(&#x27;.&#x27;, &#x27;&#x27;))</span><br><span class="line">    ret.times = times</span><br><span class="line">    ret.num = intNum</span><br><span class="line">    return ret</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">     * 核心方法，实现加减乘除运算，确保不丢失精度</span><br><span class="line">     * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）</span><br><span class="line">     *</span><br><span class="line">     * @param a &#123;number&#125; 运算数1</span><br><span class="line">     * @param b &#123;number&#125; 运算数2</span><br><span class="line">     * @param digits &#123;number&#125; 精度，保留的小数点数，比如 2, 即保留为两位小数</span><br><span class="line">     * @param op &#123;string&#125; 运算类型，有加减乘除（add/subtract/multiply/divide）</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">  function operation(a, b, digits, op) &#123;</span><br><span class="line">    var o1 = toInteger(a)</span><br><span class="line">    var o2 = toInteger(b)</span><br><span class="line">    var n1 = o1.num</span><br><span class="line">    var n2 = o2.num</span><br><span class="line">    var t1 = o1.times</span><br><span class="line">    var t2 = o2.times</span><br><span class="line">    var max = t1 &gt; t2 ? t1 : t2</span><br><span class="line">    var result = null</span><br><span class="line">    switch (op) &#123;</span><br><span class="line">      case &#x27;add&#x27;:</span><br><span class="line">        if (t1 === t2) &#123; // 两个小数位数相同</span><br><span class="line">          result = n1 + n2</span><br><span class="line">        &#125; else if (t1 &gt; t2) &#123; // o1 小数位 大于 o2</span><br><span class="line">          result = n1 + n2 * (t1 / t2)</span><br><span class="line">        &#125; else &#123; // o1 小数位 小于 o2</span><br><span class="line">          result = n1 * (t2 / t1) + n2</span><br><span class="line">        &#125;</span><br><span class="line">        return result / max</span><br><span class="line">      case &#x27;subtract&#x27;:</span><br><span class="line">        if (t1 === t2) &#123;</span><br><span class="line">          result = n1 - n2</span><br><span class="line">        &#125; else if (t1 &gt; t2) &#123;</span><br><span class="line">          result = n1 - n2 * (t1 / t2)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          result = n1 * (t2 / t1) - n2</span><br><span class="line">        &#125;</span><br><span class="line">        return result / max</span><br><span class="line">      case &#x27;multiply&#x27;:</span><br><span class="line">        result = (n1 * n2) / (t1 * t2)</span><br><span class="line">        return result</span><br><span class="line">      case &#x27;divide&#x27;:</span><br><span class="line">        result = (n1 / n2) * (t2 / t1)</span><br><span class="line">        return result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 加减乘除的四个接口</span><br><span class="line">  function add(a, b, digits) &#123;</span><br><span class="line">    return operation(a, b, digits, &#x27;add&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function subtract(a, b, digits) &#123;</span><br><span class="line">    return operation(a, b, digits, &#x27;subtract&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function multiply(a, b, digits) &#123;</span><br><span class="line">    return operation(a, b, digits, &#x27;multiply&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function divide(a, b, digits) &#123;</span><br><span class="line">    return operation(a, b, digits, &#x27;divide&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // exports 暴露出加减乘除四个方法 其他页面引入解构调用</span><br><span class="line">  return &#123;</span><br><span class="line">    add: add,</span><br><span class="line">    subtract: subtract,</span><br><span class="line">    multiply: multiply,</span><br><span class="line">    divide: divide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决小数点精度问题的JS方法&quot;&gt;&lt;a href=&quot;#解决小数点精度问题的JS方法&quot; class=&quot;headerlink&quot; title=&quot;解决小数点精度问题的JS方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;解决小数点精度问题的JS方法&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;一开始学J</summary>
      
    
    
    
    <category term="utils" scheme="https://222cabbage.github.io/categories/utils/"/>
    
    
    <category term="JS方法技巧" scheme="https://222cabbage.github.io/tags/JS%E6%96%B9%E6%B3%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Node内置模块</title>
    <link href="https://222cabbage.github.io/2022/05/15/Node2/"/>
    <id>https://222cabbage.github.io/2022/05/15/Node2/</id>
    <published>2022-05-15T07:16:27.000Z</published>
    <updated>2022-05-23T05:35:33.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node内置模块"><a href="#Node内置模块" class="headerlink" title="Node内置模块"></a><strong>Node内置模块</strong></h2><h3 id="path：路径"><a href="#path：路径" class="headerlink" title="path：路径"></a>path：路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const path  = require(&#x27;path&#x27;)</span><br><span class="line">//获取路径信息</span><br><span class="line">const filepath = &#x27;./1/2/3.text&#x27;</span><br><span class="line">console.log(path.dirname(filepath))./1/2</span><br><span class="line">console.log(path.basename(filepath))3.text</span><br><span class="line">console.log(path.extname(filepath)).text</span><br><span class="line"></span><br><span class="line">//join路径拼接</span><br><span class="line">const path1 = &#x27;/hello&#x27;</span><br><span class="line">const path2 = &#x27;/world&#x27;</span><br><span class="line">const filepath = path.join(path1,path2)</span><br><span class="line"></span><br><span class="line">//resolve拼接</span><br><span class="line">const path1 = &#x27;/a&#x27;</span><br><span class="line">const path2 = &#x27;/b&#x27;</span><br><span class="line">const dirname = path.resolve(path1,path2)</span><br><span class="line"></span><br><span class="line">resolve与join的区别</span><br><span class="line">resolve会帮助查询拼接字符串中有没有最前方的路径拼接符 &#x27;/user&#x27; 自动识别路径</span><br></pre></td></tr></table></figure><h3 id="htttp："><a href="#htttp：" class="headerlink" title="htttp："></a>htttp：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fs："><a href="#fs：" class="headerlink" title="fs："></a>fs：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">//文件系统</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line"></span><br><span class="line">//同步读取</span><br><span class="line">const fileData = fs.stateSync(path) // 后续代码被阻塞</span><br><span class="line"></span><br><span class="line">//异步读取</span><br><span class="line">fs.stat(filepath,(err,info)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(info)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//promise方式</span><br><span class="line">fs.promises.stat(filepath).then(res=&gt;&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//文件描述符</span><br><span class="line">//返回描述符</span><br><span class="line"> fs.open(filepath,(err,fs)=&gt;&#123;</span><br><span class="line">    if(err)=&gt;&#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    //通过描述符获取文件信息1</span><br><span class="line">fs.fstat(fd,(err,info)=&gt;&#123;</span><br><span class="line">console.log(info//文件信息)</span><br><span class="line">console.log(info.isDirectory()//判断是否是文件夹)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//文件读写</span><br><span class="line">const str = &#x27;123&#x27;</span><br><span class="line">options有两个选项&#x27;</span><br><span class="line">flag:</span><br><span class="line">w打开文件写入 默认值</span><br><span class="line">w+打开文件进行读写 如果不存在则创建并写入</span><br><span class="line">r+打开文件进行1读写，如果不存在则抛出异常</span><br><span class="line">r打开文件读取，读取时默认值</span><br><span class="line">a打开要写入的文件，将流放在文件末尾，如果不存在则创建文件</span><br><span class="line">a+打开文件以进行读写，将流放在末尾，如果不存在则创建文件</span><br><span class="line">fs.writeFile(&#x27;/1.txt&#x27;,content,&#123;flag:&#x27;a&#x27;,encoding:&#x27;&#x27;&#125;,(err)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//文件读取</span><br><span class="line">fs.readFile(&#x27;&#x27;,&#123;encoding:&#x27;utf-8&#x27;&#125;,(err,data)=&gt;&#123;</span><br><span class="line">    console.log(data) //buffer二进制在不使用encoding的情况下</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//文件夹操作</span><br><span class="line">1：创建文件夹</span><br><span class="line">const dirname = &#x27;./why&#x27;</span><br><span class="line">if(fs.existsSync(dirname))&#123;</span><br><span class="line">    fs.mkdir(dirname,err =&gt; &#123;</span><br><span class="line">console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">fs.mkdir //盲猜可以弄个脚本自动生成组件文件夹名</span><br><span class="line">2：读取文件夹中所有文件</span><br><span class="line">const readdir(dirname,(err,files)=&gt;&#123;</span><br><span class="line">    console.log(files)//获取所有文件</span><br><span class="line">&#125;)</span><br><span class="line">//递归调用读取文件名</span><br><span class="line">const getFiles = (dirname)=&gt;&#123;</span><br><span class="line">    fs.readdir(firname,&#123;withFileTypes:true&#125;,(err,files)=&gt;&#123;</span><br><span class="line">        console.log(files)</span><br><span class="line">        file.forEach(item=&gt;&#123;</span><br><span class="line">            if(item.isDirectory())&#123;</span><br><span class="line">            const filepath = path.resolve(dirname,item.name)</span><br><span class="line">                getFiles(filepath)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                console.log(item.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">getFiles(dirname)</span><br><span class="line">3：文件夹重命名</span><br><span class="line">fs.rename(旧名称，新名称，err=&gt;&#123;</span><br><span class="line">console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line">fs.rename(&#x27;./why&#x27;,&#x27;./kobe&#x27;,err=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="events："><a href="#events：" class="headerlink" title="events："></a>events：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//发出事件与监听事件</span><br><span class="line">const EnentEmitter = require(&#x27;event&#x27;)</span><br><span class="line">const emitter = new EventEmitter()</span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line">//emitter.addEventLister //addEventListener是on的简写</span><br><span class="line">emitter.on(&#x27;click&#x27;,(args)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;监听到了click事件&#x27;,args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//发出</span><br><span class="line">emitter.emit(&#x27;click&#x27;,&quot;hao&quot;)</span><br><span class="line"></span><br><span class="line">//关闭</span><br><span class="line">emitter.off(&#x27;事件名&#x27;)</span><br><span class="line"></span><br><span class="line">//获取信息</span><br><span class="line">获取注册的事件</span><br><span class="line">console.log(emitter.eventNames())</span><br><span class="line">console.log(emitter.listenerCount(&#x27;click&#x27;)) //获取数量</span><br><span class="line">console.log(emitter.listeners(&#x27;click&#x27;))</span><br><span class="line">emitter.once // 只监听一次</span><br><span class="line">emitter.prependListener //将本次放在最前面</span><br><span class="line">emitter.removeAllListeners() //移除所有事件</span><br></pre></td></tr></table></figure><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Node内置模块&quot;&gt;&lt;a href=&quot;#Node内置模块&quot; class=&quot;headerlink&quot; title=&quot;Node内置模块&quot;&gt;&lt;/a&gt;&lt;strong&gt;Node内置模块&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;path：路径&quot;&gt;&lt;a href=&quot;#path：</summary>
      
    
    
    
    <category term="Node" scheme="https://222cabbage.github.io/categories/Node/"/>
    
    
    <category term="Node学习" scheme="https://222cabbage.github.io/tags/Node%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://222cabbage.github.io/2022/05/14/algorithm1/"/>
    <id>https://222cabbage.github.io/2022/05/14/algorithm1/</id>
    <published>2022-05-14T07:04:01.000Z</published>
    <updated>2022-05-14T07:46:18.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构走起！"><a href="#数据结构走起！" class="headerlink" title="数据结构走起！"></a><strong>数据结构走起！</strong></h2><p>Loading……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据结构走起！&quot;&gt;&lt;a href=&quot;#数据结构走起！&quot; class=&quot;headerlink&quot; title=&quot;数据结构走起！&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据结构走起！&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Loading……&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://222cabbage.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://222cabbage.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS面试题集合</title>
    <link href="https://222cabbage.github.io/2022/05/14/Face/"/>
    <id>https://222cabbage.github.io/2022/05/14/Face/</id>
    <published>2022-05-13T17:40:15.000Z</published>
    <updated>2022-05-14T07:09:37.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲了很久，来看看JS面试题"><a href="#闲了很久，来看看JS面试题" class="headerlink" title="闲了很久，来看看JS面试题"></a><strong>闲了很久，来看看JS面试题</strong></h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimgo.liulanqi.net%2Fimg2021%2F8%2F3%2F16%2F2021080306162527.jpg&refer=http%3A%2F%2Fimgo.liulanqi.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655055719&t=b021a867f2d422ae5975c3348e8b8aae" alt="img"></p><h4 id="涩涩狗子镇楼！"><a href="#涩涩狗子镇楼！" class="headerlink" title="涩涩狗子镇楼！"></a>涩涩狗子镇楼！</h4><h3 id="1：延迟加载JS的方式？"><a href="#1：延迟加载JS的方式？" class="headerlink" title="1：延迟加载JS的方式？"></a>1：延迟加载JS的方式？</h3><p>async 与 defer</p><p>async 是解析与渲染DOM结构同时进行</p><p>defer虽然也是解析script脚本与渲染DOM同时进行，但是会等待DOM结构渲染完成以后再去加载script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=&quot;../&quot;&gt;&lt;script&gt;</span><br><span class="line">&lt;script async src=&quot;../&quot;&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2：数据类型"><a href="#2：数据类型" class="headerlink" title="2：数据类型"></a><strong>2：数据类型</strong></h3><p>javascript数据类型分为基本类型与引用类型两大类</p><p>基本类型：string，number，boolean，null，undefined，symbol，bigInt(存在争论，有些人认为不应该)</p><p>引用类型：object（object是一个大类，包含对象，数组，函数等引用类型）</p><h3 id="3：null和undefined的区别"><a href="#3：null和undefined的区别" class="headerlink" title="3：null和undefined的区别"></a><strong>3：null和undefined的区别</strong></h3><p>最初javascript木有undefined类型，是作者后续添加的，他本人认为不能将一切表示为无的值都设置为null，可以将无的基本类型设置为undefined</p><h3 id="4：-x3D-x3D-与-x3D-x3D-x3D-的区别"><a href="#4：-x3D-x3D-与-x3D-x3D-x3D-的区别" class="headerlink" title="4：&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别"></a><strong>4：&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别</strong></h3><p>&#x3D;&#x3D; 在数据比较时，会隐式转换（调用valueof进行转换对比）,只比较值不比较类型</p><p>而&#x3D;&#x3D;&#x3D;比较类型也比较值 必须到完全的相同，因此在项目中比较两个值应该采用&#x3D;&#x3D;&#x3D;的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = 2</span><br><span class="line">if（a == &#x27;2&#x27;）&#123;</span><br><span class="line">    console.log(&#x27; a = &#x27;2&#x27; &#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5：微任务和宏任务"><a href="#5：微任务和宏任务" class="headerlink" title="5：微任务和宏任务"></a>5：微任务和宏任务</h3><p>script脚本中包含同步与异步逻辑，页面会首先执行同步代码，再执行异步代码</p><p>而异步代码又区分为微任务和宏任务，与事件循环机制相关</p><p>在执行宏任务之前，会查看页面有没有未执行的微任务，先清空页面微任务再执行宏任务</p><p>微任务：Promise.then</p><p>宏任务：定时器，事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;123&#x27;)</span><br><span class="line">&#125;,2000)</span><br><span class="line"></span><br><span class="line">new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">console.log(&#x27;promise&#x27;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;then1&#x27;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;then2&#x27;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;同步&#x27;)</span><br><span class="line"></span><br><span class="line">result: &#x27;promise&#x27; &#x27;同步&#x27; &#x27;then1&#x27; &#x27;then2&#x27; &#x27;123&#x27;</span><br></pre></td></tr></table></figure><h3 id="6：作用域-smile-cat"><a href="#6：作用域-smile-cat" class="headerlink" title="6：作用域:smile_cat:"></a>6<strong>：作用域</strong>:smile_cat:</h3><p>1：除了函数外 js是没有块级作用域的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function aa()&#123;</span><br><span class="line">let a = 10</span><br><span class="line">&#125;</span><br><span class="line">aa()</span><br><span class="line">console.log(a) ::a is not defined</span><br><span class="line"></span><br><span class="line">for(var i = 1; i &lt; 10 : i++)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">console.log(i) : i = 10</span><br></pre></td></tr></table></figure><p>2：作用域链 内部可以访问外部变量 外部无法访问内部变量 从内到外依次查找 遵循内部优先</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let a = 10</span><br><span class="line">function fn（）&#123;</span><br><span class="line">    function fnn（）&#123;</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fnn()</span><br><span class="line">&#125;</span><br><span class="line">fn() : 10</span><br></pre></td></tr></table></figure><p>3；声明变量不带var 那么就是挂载window上 任意位置都能访问</p><p>var  a &#x3D; b &#x3D; 10   &#x3D;&#x3D;&#x3D;   var a &#x3D; 10    window.b &#x3D; 10</p><p>var a,b &#x3D; 10 &#x3D;&#x3D;&#x3D; var a &#x3D; 10   var b &#x3D; 10</p><p>4：js有变量提升  国外称为变量悬挂声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">//var str</span><br><span class="line">console.log(str) // undefined</span><br><span class="line">var str = 20</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><p>5：优先级</p><p>声明变量 &gt; 声明普通函数 &gt; 参数 &gt;  变量提升</p><h3 id="7：对象"><a href="#7：对象" class="headerlink" title="7：对象"></a><strong>7：对象</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log([1,2,3] === [1,2,3]) //false 因为两个对象都是new出来的并不相同</span><br><span class="line"></span><br><span class="line">var a = &#123;</span><br><span class="line">    a：1</span><br><span class="line">&#125;</span><br><span class="line">var b = a</span><br><span class="line">console.log(a === b) //true 因为史诗同一个引用对象 因此相同</span><br></pre></td></tr></table></figure><p>对象的key都是字符串类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">有趣的面试题</span><br><span class="line">var a = &#123;&#125;</span><br><span class="line">var b = &#123;</span><br><span class="line">    key：&#x27;a&#x27;</span><br><span class="line">&#125;</span><br><span class="line">var c = &#123;</span><br><span class="line">    key:&#x27;c&#x27;</span><br><span class="line">&#125;</span><br><span class="line">a[b] = &#x27;123&#x27; // a[obj obj] = &#x27;123&#x27;</span><br><span class="line">a[c] = &#x27;456&#x27; // a[obj obj] = &#x27;456&#x27;</span><br><span class="line">console.log(a[b]) //console.log(a[obj obj])</span><br></pre></td></tr></table></figure><p>对象是如何查找某个属性？ 对象是通过构造函数生成的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Fun（）&#123;</span><br><span class="line">    this.a = &#x27;fun&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.a = &#x27;fun原型&#x27;</span><br><span class="line">let obj = new Fun()</span><br><span class="line">obj.a = &#x27;对象本身&#x27;</span><br><span class="line">obj.__proto__.a = &#x27;对象原型&#x27;</span><br><span class="line">console.log(obj.a) // &#x27;对象本身&#x27;</span><br><span class="line">先查找对象本身 =&gt; 构造函数的内部 =&gt; 对象的原型 =&gt; 构造函数的原型 =&gt; 对象上一层原型</span><br></pre></td></tr></table></figure><h3 id="8：作用域-this指向-原型"><a href="#8：作用域-this指向-原型" class="headerlink" title="8：作用域  + this指向 + 原型"></a>8：作用域  + this指向 + 原型</h3><p>Loading——</p><h3 id="9：判断数组方法"><a href="#9：判断数组方法" class="headerlink" title="9：判断数组方法"></a>9：判断数组方法</h3><p>使用场景：虚拟dom判断子节点是不是数组</p><p>1：isArray</p><p>2：instanceof [坑多，typeof更多 不建议用]</p><p>3：原型判断</p><p>4:：isPrototypeOf()</p><p>5：constructor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3]</span><br><span class="line">console.log(Array.isArray(arr)) //true</span><br><span class="line">console.log(arr instanceof Array) //true</span><br><span class="line">console.log(Object.prototype.toString.call(arr).indexOf(&#x27;Array&#x27;) != -1) //8 [Object Array]</span><br><span class="line">console.log(Array.prototypee.isPrototypeOf(arr)) </span><br><span class="line">console.log(arr.constructor.toString().indexOf(&#x27;Array&#x27;) &gt; -1)</span><br></pre></td></tr></table></figure><h3 id="10：slice与splice"><a href="#10：slice与splice" class="headerlink" title="10：slice与splice"></a>10：slice与splice</h3><p>slice的作用，splice是否会改变原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//slice截取作用 参数可以写一个 代表从该参数位置开始截取到最后</span><br><span class="line">let arr = [a,b,c,d]</span><br><span class="line">let arr2 = arr.slice(1,3) //从索引1开始 截取到3之前一位 [b,c] 返回新数组</span><br><span class="line"></span><br><span class="line">//splice 删除 ，插入，替换 会改变原数组</span><br><span class="line">let arr2 = [a,b,c,d]</span><br><span class="line">let arr3 = arr2.splice(1,1) // b 返回删除的元素数组 原本的arr2 [a,c,d]</span><br><span class="line">let arr4 = arr2.splice(1,1,&#x27;你好&#x27;) // 从1开始 删除一个元素 在原本位置插入你好</span><br></pre></td></tr></table></figure><h3 id="11：多维数组最大值"><a href="#11：多维数组最大值" class="headerlink" title="11：多维数组最大值"></a>11：多维数组最大值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let arr  = [</span><br><span class="line">    [4,4,5],</span><br><span class="line">    [10,123,123],</span><br><span class="line">    [123123,12,323,123]</span><br><span class="line">]</span><br><span class="line">分别找到每个数组最大的值</span><br><span class="line">输出[5,123,123123]</span><br><span class="line"></span><br><span class="line">code：</span><br><span class="line">function(arr)&#123;</span><br><span class="line">    let newArr = []</span><br><span class="line">    arr.forEach((iitem,index)=&gt;&#123;</span><br><span class="line">        newArr.push(Math.max(...item))</span><br><span class="line">    &#125;)</span><br><span class="line">    reurn newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12：字符串新增方法实现某些功能"><a href="#12：字符串新增方法实现某些功能" class="headerlink" title="12：字符串新增方法实现某些功能"></a>12：字符串新增方法实现某些功能</h3><p>给字符串定义一个方法addStart，当传入该方法一个字符串时，返回当前字符串+参数前缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.addStr = function(str)&#123;</span><br><span class="line">    return str + this</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13：找出字符串出现最多次数字符和次数"><a href="#13：找出字符串出现最多次数字符和次数" class="headerlink" title="13：找出字符串出现最多次数字符和次数"></a>13：找出字符串出现最多次数字符和次数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1:</span><br><span class="line">var str = &#x27;111222333333444444444444&#x27;</span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">for(var i = 0; i &lt; str.length; i++)&#123;</span><br><span class="line">    if(obj[str[i]])&#123;</span><br><span class="line">        obj[str[i]]++</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        obj[str[i]] = 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj) // &#123;a:b:c:d:&#125;</span><br><span class="line">///统计最大值</span><br><span class="line">var max = 0</span><br><span class="line">for(var k in obj)&#123;</span><br><span class="line">    if(max &lt; obj.key)&#123;</span><br><span class="line">        max = obj.key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(var key in obj)&#123;</span><br><span class="line">    if(mx == obj[key])&#123;</span><br><span class="line">console.log(obj[key]) // 最多次数的字符</span><br><span class="line">console.log(max) //最次数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14：new操作符"><a href="#14：new操作符" class="headerlink" title="14：new操作符"></a>14：new操作符</h3><p>1：创建一个空的对象</p><p>2：将空对象的原型指向构造函数原型</p><p>3：将空对作为构造函数上下文（改变this指向）</p><p>4：对构造函数有返回值的处理判断 如果这个构造函数返回基本类型 那么会忽略 如果是引用类型则会返回这个引用类型 new失效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function Fo（）&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.log(new Fo()) //obj 创建一个空的对象</span><br><span class="line">console.log(new Fo.__proto__ === Fo.prototype)</span><br><span class="line">console.log()</span><br><span class="line"></span><br><span class="line">实现一个相同的函数</span><br><span class="line">function Fun(age,name)&#123;</span><br><span class="line">this.age = age</span><br><span class="line">this.name = name</span><br><span class="line">&#125;</span><br><span class="line">function create(fn,..args)&#123;</span><br><span class="line">//创建空对象</span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">//将空对象原型指向构造函数原型</span><br><span class="line">Object.setPrototypeOf(obj,fn.prototype)</span><br><span class="line">//改变this指向</span><br><span class="line">var result = fn.apply(obj.args)</span><br><span class="line">//最后处理</span><br><span class="line">return result instanceof Object ? result : obj</span><br><span class="line">&#125;</span><br><span class="line">function(create(Fun,18,&#x27;lisi&#x27;))</span><br></pre></td></tr></table></figure><h3 id="15：闭包"><a href="#15：闭包" class="headerlink" title="15：闭包"></a>15：闭包</h3><p>1：闭包是什么</p><p>一个函数加上到创建函数作用域的连接 闭包关闭了函数在自由变量</p><p>js中尽量不要写全局变量 因为系统并不知道什么时候会垃圾回收</p><p>2：闭包可以解决什么问题【优点】</p><p>内部函数可以访问到外部函数局部变量</p><p>3：闭包的缺点</p><p>变量会驻留在内存中 造成内存损耗问题</p><p>内存泄露是在ie的情况</p><p>解决方式手动清空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function a ()&#123;</span><br><span class="line">var b = 10</span><br><span class="line">return function()&#123;</span><br><span class="line">     console.log(b)   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a()() // a()执行完以后没有销毁 因此a()()能够打印出b</span><br><span class="line"></span><br><span class="line">//优点</span><br><span class="line">let lis = document.getElementsByTagName(&#x27;li&#x27;)</span><br><span class="line">for(var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    lis[i].onclick = function()&#123;</span><br><span class="line">        console.log(i) // 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">改造成闭包的形式</span><br><span class="line">for(var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">function((i)&#123;</span><br><span class="line">            lis[i].onclick = function()&#123;</span><br><span class="line">                console.log(i) // 3</span><br><span class="line">            &#125;</span><br><span class="line">            lis[i] = null //手动清空</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16：原型链"><a href="#16：原型链" class="headerlink" title="16：原型链"></a>16：原型链</h3><h3 id="17：js继承方式"><a href="#17：js继承方式" class="headerlink" title="17：js继承方式"></a>17：js继承方式</h3><h3 id="18：call，apply，bind区别"><a href="#18：call，apply，bind区别" class="headerlink" title="18：call，apply，bind区别"></a><strong>18：call，apply，bind区别</strong></h3><h3 id="19：sort背后原理"><a href="#19：sort背后原理" class="headerlink" title="19：sort背后原理"></a>19：sort背后原理</h3><h3 id="20：深拷贝与浅拷贝"><a href="#20：深拷贝与浅拷贝" class="headerlink" title="20：深拷贝与浅拷贝"></a>20：深拷贝与浅拷贝</h3><h3 id="21：本次存储localStorage-x2F-sessionStorage与cookie区别"><a href="#21：本次存储localStorage-x2F-sessionStorage与cookie区别" class="headerlink" title="21：本次存储localStorage&#x2F;sessionStorage与cookie区别"></a>21：本次存储localStorage&#x2F;sessionStorage与cookie区别</h3><p>未完待续……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;闲了很久，来看看JS面试题&quot;&gt;&lt;a href=&quot;#闲了很久，来看看JS面试题&quot; class=&quot;headerlink&quot; title=&quot;闲了很久，来看看JS面试题&quot;&gt;&lt;/a&gt;&lt;strong&gt;闲了很久，来看看JS面试题&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    <category term="面试" scheme="https://222cabbage.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试题" scheme="https://222cabbage.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HaoUI第二次尝试</title>
    <link href="https://222cabbage.github.io/2022/05/13/HaoUI2/"/>
    <id>https://222cabbage.github.io/2022/05/13/HaoUI2/</id>
    <published>2022-05-13T04:08:17.000Z</published>
    <updated>2022-05-13T06:16:36.669Z</updated>
    
    <content type="html"><![CDATA[<p>之前完成了h-icon与h-button的封装，今天来尝试一下完成HaoUI其他组件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前完成了h-icon与h-button的封装，今天来尝试一下完成HaoUI其他组件&lt;/p&gt;
</summary>
      
    
    
    
    <category term="HaoUI" scheme="https://222cabbage.github.io/categories/HaoUI/"/>
    
    
    <category term="个人组件库" scheme="https://222cabbage.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HaoUI开始</title>
    <link href="https://222cabbage.github.io/2022/05/13/HaoUI1/"/>
    <id>https://222cabbage.github.io/2022/05/13/HaoUI1/</id>
    <published>2022-05-12T17:45:55.000Z</published>
    <updated>2022-05-13T04:13:48.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HaoUI-h-icon-与-h-button"><a href="#HaoUI-h-icon-与-h-button" class="headerlink" title="HaoUI  h-icon 与 h-button"></a><strong>HaoUI  h-icon 与 h-button</strong></h2><p>h-icon 图标组件</p><p>h-button按钮组件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HaoUI-h-icon-与-h-button&quot;&gt;&lt;a href=&quot;#HaoUI-h-icon-与-h-button&quot; class=&quot;headerlink&quot; title=&quot;HaoUI  h-icon 与 h-button&quot;&gt;&lt;/a&gt;&lt;strong&gt;HaoUI  h</summary>
      
    
    
    
    <category term="HaoUI" scheme="https://222cabbage.github.io/categories/HaoUI/"/>
    
    
    <category term="个人组件库" scheme="https://222cabbage.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>邂逅Node</title>
    <link href="https://222cabbage.github.io/2022/05/13/Node1/"/>
    <id>https://222cabbage.github.io/2022/05/13/Node1/</id>
    <published>2022-05-12T17:20:29.000Z</published>
    <updated>2022-05-15T07:18:40.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邂逅Node"><a href="#邂逅Node" class="headerlink" title="邂逅Node"></a><strong>邂逅Node</strong></h2><h3 id="1：浏览器内核"><a href="#1：浏览器内核" class="headerlink" title="1：浏览器内核"></a><strong>1：浏览器内核</strong></h3><p>Geoko，Trident，Webkit，Blink</p><p>但是前端经常提到的浏览器内核一般是浏览器的排版引擎</p><p>排版引擎 ，浏览器引擎，页面渲染引擎，样排引擎</p><h3 id="2：比较常见的javascript引擎"><a href="#2：比较常见的javascript引擎" class="headerlink" title="2：比较常见的javascript引擎"></a>2：比较常见的javascript引擎</h3><p>SpiderMonkey：js作者开发</p><p>Chakra：微软开发</p><p>JavascriptCore：Webkit中的js引擎 apple开发</p><p>V8：谷歌的，脱颖而出</p><p>V8执行js代码的原理</p><h3 id="3：Node"><a href="#3：Node" class="headerlink" title="3：Node"></a><strong>3：Node</strong></h3><p>node是基于v8引擎的js运行环境</p><p>如果想在一台电脑运行多个node版本 那么可以借助nvm与n工具</p><p>但是这两个工具不支持windows，不过有其他人开发出了支持windows的版本</p><h3 id="4：全局对象和模块化开发"><a href="#4：全局对象和模块化开发" class="headerlink" title="4：全局对象和模块化开发"></a><strong>4：全局对象和模块化开发</strong></h3><p>node index.js env&#x3D;development</p><p>可以在后面跟随传递参数 在index.js中根据console.log(process.argv)获取</p><p><img src="https://s1.ax1x.com/2022/05/14/Oc0c4g.png"></p><p><img src="https://s1.ax1x.com/2022/05/14/Oc02CQ.png"></p><p>console.clear() 清空</p><p>console.trace() 追踪 打印函数调用栈</p><h2 id="常见全局对象"><a href="#常见全局对象" class="headerlink" title="常见全局对象"></a>常见全局对象</h2><p>require，__dirname，module，URL，exports等，可以去官网查看更多全局对象</p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>最终目的：将程序划分为一个个结构，每个结构包含自己的逻辑到&#x3D;代码，不会影响到其他作用域</p><p>可以暴露出变量，函数，对象供其他结构导入使用</p><p>js缺陷：var定义的变量作用域问题，没有模块化的问题 可以用立即执行函数解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var module = (function()&#123;</span><br><span class="line">    var name = &#x27;zhangsan&#x27;</span><br><span class="line">    var age = &#x27;21&#x27;</span><br><span class="line">    return &#123;</span><br><span class="line">        name,age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="Commonjs"><a href="#Commonjs" class="headerlink" title="Commonjs"></a>Commonjs</h4><p>exports，module.exports导出 require导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.js</span><br><span class="line">exports.name = &#x27;aaa&#x27;</span><br><span class="line">b.js</span><br><span class="line">let a = require(&#x27;a.js&#x27;)</span><br><span class="line">console.log(a.name) // &#x27;aaa&#x27;</span><br></pre></td></tr></table></figure><p>module的原理 每个模块默认有个module指向一个空对象 exports.name &#x3D; name 是将空对象中的name 变为 name</p><p>require是想办法将这个对象作为返回值返回 实际上是浅层拷贝</p><p>module.exports 与 exports 区别 exports是Module的一个实例 实际上exports是使用的module.exports</p><p>源码中将 module.exports &#x3D; exports</p><p>require细节</p><p>require的查找规则</p><p>1：path&#x2F;http模块</p><p>2：.&#x2F;   ..&#x2F;    &#x2F;  开头 有后缀名按照后缀名查找 否则先查找不带后缀名 &#x3D;&gt;  .js &#x3D;&gt; .json &#x3D;&gt; .node</p><p>如果是目录名 那么就会去该目录查找.js .json .node</p><p>3：既不是模块也不是目录 那么就会去node_modules查找   &#x2F;&#x2F;not found</p><p>模块的引入查找是数据结构图的便遍历 广度优先和深度优先</p><p>Node是采用的深度优先</p><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><p>require.js   cuel.js</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>sea.js</p><h4 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h4><p>使用import 与 export</p><p>默认导出exort default   一个模块只能有一个</p><p>es module加载过程</p><p>是异步的script type&#x3D;”module”  相当于加了async 并不会影响加载</p><p>es modole 原理   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export &#123;</span><br><span class="line">    name,age</span><br><span class="line">&#125; //相当于  &#123;</span><br><span class="line">    const name = name,</span><br><span class="line">const age = age</span><br><span class="line">&#125;</span><br><span class="line">//如果是基本类型</span><br><span class="line">import &#123; name,age &#125; from &#x27;index.js&#x27;</span><br><span class="line">name = &#x27;123&#x27; // 语法错误 不能直接修改const的值 如果name是引用地址可以修改</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;邂逅Node&quot;&gt;&lt;a href=&quot;#邂逅Node&quot; class=&quot;headerlink&quot; title=&quot;邂逅Node&quot;&gt;&lt;/a&gt;&lt;strong&gt;邂逅Node&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1：浏览器内核&quot;&gt;&lt;a href=&quot;#1：浏览器内核&quot; clas</summary>
      
    
    
    
    <category term="Node" scheme="https://222cabbage.github.io/categories/Node/"/>
    
    
    <category term="Node学习" scheme="https://222cabbage.github.io/tags/Node%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
